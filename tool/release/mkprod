#!/bin/bash

###########################################################################
# Copyright (c) 2001 by Punch Telematix. All rights reserved.             #
#                                                                         #
# Redistribution and use in source and binary forms, with or without      #
# modification, are permitted provided that the following conditions      #
# are met:                                                                #
# 1. Redistributions of source code must retain the above copyright       #
#    notice, this list of conditions and the following disclaimer.        #
# 2. Redistributions in binary form must reproduce the above copyright    #
#    notice, this list of conditions and the following disclaimer in the  #
#    documentation and/or other materials provided with the distribution. #
# 3. Neither the name of Punch Telematix nor the names of other           #
#    contributors may be used to endorse or promote products derived      #
#    from this software without specific prior written permission.        #
#                                                                         #
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED          #
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    #
# IN NO EVENT SHALL PUNCH TELEMATIX OR OTHER CONTRIBUTORS BE LIABLE       #
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR            #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR         #
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   #
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    #
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  #
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           #
###########################################################################

# -------------------------------------------------------------------
function getArgs() {

  if [ $1 ] && [ $1 = "-x" ]; then
    shift
    set -x
  fi

  if [ $# -lt 2 ] || [ $1 = "--help" ] || [ $1 = "-h" ]; then
    showHelp
    set -
    exit
  else
    RELEASE=$1
    PRDNAME=$2
  fi

}

# -----------------------------------------------------------------------------

function showHelp() {
  echo "Usage 1: mkprod [-x] <cvs tag> <result files infix>"
  echo
  echo "e.g. execution of"
  echo "   mkprod WONKA-0-7-2-RELEASE 0.7.2-release"
  echo
  echo "results in the creation of files"
  echo "  wonka-bin-x86-linux-0.7.2-release.tar.gz"
  echo "  wonka-bin-arm-linux-0.7.2-release.tar.gz"
  echo "  wonka-src-0.7.2-release.tar.gz"
  echo "temporary directories ./open-wonka ./x86 and ./arm are left for inspection,"
  echo "but can otherwise be removed"
  echo
  echo "option -x sets script debug node on; if used it must be first argument"
  echo
  echo "Usage 2: mkprod {--help|-h}"
  echo "  generates this help text"
  exit
}

# MAIN ------------------------------------------------------------------------

# not used yet ...

if [ -z $RTTOOL ] ; then
  echo "Environment variable RTTOOL not defined. Cannot proceed."
  exit
else
  source $RTTOOL/j_include
  if [ $? -ne 0 ]; then
    echo "Aborting ..."
    exit
  fi
fi

# end not used yet ...

RELEASE=
PRDNAME=
getArgs $*

# get cvs sources; (re)move some files

echo "exporting cvs sources..."
cvs export -r $RELEASE open-wonka &> /dev/null
j_abort $? "cvs export failed."

if [ -e open-wonka/doc/release ]; then
  rm -rf open-wonka/doc/release
fi
if [ -e open-wonka/tool/release ]; then
  rm -rf open-wonka/tool/release
fi
if [ -e open-wonka/wonka/doc/website ]; then
  rm -rf open-wonka/wonka/doc/website
fi
if [ -e open-wonka/htdocs ]; then
  rm -rf open-wonka/htdocs
fi
if [ -e open-wonka/awt/rudolph/include/fonts/ ]; then
  rm -rf open-wonka/awt/rudolph/include/fonts/
fi
if [ -e open-wonka/tool/visualtest/java/com/acunia/wonka/test/awt/IAA ]; then
  rm -rf open-wonka/tool/visualtest/java/com/acunia/wonka/test/awt/IAA
fi
j_changeVTEBuild open-wonka/tool/visualtest/java/com/acunia/wonka/test/awt/
# create source product

tar -cvf wonka-src-$PRDNAME.tar open-wonka
gzip wonka-src-$PRDNAME.tar

# prepare for binary product creation

export CLASSPATH=
export WONKA_TOP=$PWD/open-wonka

# create binary product for x86-linux

cd open-wonka
jam -sCPU=x86 -sSTATIC=true -sDEBUG=false install
mkdir ../x86
mv build-x86-linux/wonka/fsroot ../x86
mv build-x86-linux/wonka/wonka  ../x86
#rm -rf ../x86/fsroot/test/CLTest.jar
rm -rf ../x86/fsroot/test/junit.jar
cp README.install ../x86
cp COPYRIGHT ../x86
# clean-up x86-linux
rm -rf build-x86-linux

cd ../x86
strip wonka
cd ..
mv open-wonka src
mv x86 open-wonka
tar -cvf wonka-bin-x86-linux-$PRDNAME.tar open-wonka
gzip wonka-bin-x86-linux-$PRDNAME.tar
mv open-wonka x86
mv src open-wonka

# create binary product for arm-linux

cd open-wonka
jam -sCPU=arm -sSTATIC=true -sDEBUG=false install
mkdir ../arm
mv build-arm-linux/wonka/fsroot ../arm
mv build-arm-linux/wonka/wonka  ../arm
#rm -rf ../arm/fsroot/test/CLTest.jar
rm -rf ../arm/fsroot/test/junit.jar
cp README.install ../arm
cp COPYRIGHT ../arm
# clean-up arm-linux
rm -rf build-arm-linux

cd ../arm
arm-linux-strip wonka
cd ..
mv open-wonka src
mv arm open-wonka
tar -cvf wonka-bin-arm-linux-$PRDNAME.tar open-wonka
gzip wonka-bin-arm-linux-$PRDNAME.tar
mv open-wonka arm
mv src open-wonka

# clean-up complete open-wonka

rm -rf open-wonka/class
rm open-wonka/mcl.jar
rm open-wonka/compiler/none/src/libcompiler.a

# test src product

echo "Checking tree of untarred source product ..."
mkdir srctmp
cd srctmp
tar -zxvf ../wonka-src-$PRDNAME.tar.gz  > /dev/null
ls -R open-wonka > ../a
cd ..
ls -R open-wonka > ./b
diff a b > wonka-src-$PRDNAME.diff
if [ $? -ne 0 ]; then
  echo "  error : tree differs from original open-wonka tree; see file 'wonka-src-$PRDNAME.diff'."
else
  rm wonka-src-$PRDNAME.diff
  echo "  tree ok"
fi
rm a
rm b
rm -rf srctmp


# test x86 binary product; to be elaborated with more tests  ....

REPLY=
j_continue "Would you like to check the x86 binary product?"
if [ "$REPLY" = "y" ]; then
  echo "  Visual Test Engine will be started.  "
  echo "  If it runs fine, please leave using the 'quit' button. "
  mkdir x86tmp
  cd x86tmp
  tar -zxvf ../wonka-bin-x86-linux-$PRDNAME.tar.gz  > /dev/null
  cd open-wonka
  ./wonka  > /dev/null
  cd ../..
  rm -rf x86tmp
  if [ $? -ne 0 ]; then
    j_continue "Check of x86 binary product not successful. Continue?"
    if [ "$REPLY" = "n" ]; then
      j_abort
    fi
  fi
fi

# test arm binary product ; to be elaborated with tests

REPLY=
j_continue "Would you like to check the arm binary product?"
if [ "$REPLY" = "y" ]; then

  # untar the binary arm product

  if [ -e armtmp/open-wonka/wonka ]; then
    j_continue "untar-ed arm binary already exists. Overwrite?"
    if [ "$REPLY" = "y" ]; then
      rm -rf armtmp
      j_abort $? "Removal of untar-ed arm binary not successful."
    fi
  fi

  if [ ! -e armtmp/open-wonka/wonka ]; then
    mkdir armtmp
    cd armtmp
    tar -zxvf ../wonka-bin-arm-linux-$PRDNAME.tar.gz  > /dev/null
  else
    cd armtmp
  fi

  # copy binary product files to flash disk

  unalias du
  let PRDSIZE=$(du -s open-wonka | cut -f1)+200
  # find out how to store flash disk free space in a variable as well
  echo "Please insert flash disk in this pc "
  echo "Mount it as root."
  echo "Make sure you have permission to write on the flash."
  echo "You need ${PRDSIZE}Kb of free disk space on the flash disk."
  j_continue "  Are you ready?"

  if [ -e /mnt/f2/root/open-wonka ]; then
    j_continue "open-wonka directory already exists on flash disk. Overwrite?"
    if [ "$REPLY" = "y" ]; then
      rm -rf /mnt/f2/root/open-wonka
      j_abort $? "Removal of old open-wonka directory not successful."
    fi
  fi

  if [ -e /mnt/f2/root/open-wonka ]; then
    echo "Binary not copied."
    echo "Unmount flash disk as root."
  else
    echo "Copying binary ... "
    let COPY=1
    while [ $COPY -ne 0 ]; do
      cp -R open-wonka /mnt/f2/root/
      let COPY=$?
      REPLY=
      if [ $COPY -ne 0 ]; then
        j_continue "Copying not successful. Please repair. Continue when ready?"
      fi
    done

    echo "Unmount flash disk as root."
    if [ -z $REPLY ] || [ $REPLY = y ]; then
      echo "Plug flash disk in an anakin or iPAQ and test the wonka executable:"
      echo "  on anakin: /root/open-wonka/wonka "
      echo "  on iPAQ:   /mnt/ramfs/f2/root/open-wonka/wonka"
    fi
  fi

  cd ..
  rm -rf armtmp
fi

#set -
