#!/bin/bash

###########################################################################
# Copyright (c) 2001 by Punch Telematix. All rights reserved.             #
#                                                                         #
# Redistribution and use in source and binary forms, with or without      #
# modification, are permitted provided that the following conditions      #
# are met:                                                                #
# 1. Redistributions of source code must retain the above copyright       #
#    notice, this list of conditions and the following disclaimer.        #
# 2. Redistributions in binary form must reproduce the above copyright    #
#    notice, this list of conditions and the following disclaimer in the  #
#    documentation and/or other materials provided with the distribution. #
# 3. Neither the name of Punch Telematix nor the names of other           #
#    contributors may be used to endorse or promote products derived      #
#    from this software without specific prior written permission.        #
#                                                                         #
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED          #
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    #
# IN NO EVENT SHALL PUNCH TELEMATIX OR OTHER CONTRIBUTORS BE LIABLE       #
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR            #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR         #
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   #
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    #
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  #
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           #
###########################################################################

# -------------------------------------------------------------------
function checkCompileTools() {

  # input parameter is a list of build numbers

  while [ $# -gt 0 ]; do
    case $1 in
      2 | 7 | 8 | 9 | 10 | 11 | 12 | 22 | 27 | 28 | 29 | 30 | 31 | 32 )
        which gcc &> /dev/null
        if [ $? -ne 0 ]; then
          echo "'gcc' compiler not found. aborting ..." 1>&2
          exit 1
        else
          which strip &> /dev/null
          if [ $? -ne 0 ] ; then
            echo "'strip' tool not found. aborting ..." 1>&2
            exit 1
          else
            break
          fi
        fi
        ;;
      1 | 3 | 4 | 5 | 6 | 21 | 23 | 24 | 25 | 26 )
        which arm-linux-gcc &> /dev/null
        if [ $? -ne 0 ] ; then
          echo "'arm-linux-gcc' compiler not found. aborting ..." 1>&2
          exit 1
        else
          which arm-linux-strip &> /dev/null
          if [ $? -ne 0 ] ; then
            echo "'arm-linux-strip' tool not found. aborting ..." 1>&2
            exit 1
          else
            break
          fi
        fi
        ;;
      * )
        ;;
    esac

    shift
  done
}

# -------------------------------------------------------------------
function checkTools() {
  if [ -z $RTTOOL ] ; then
    echo "Please export Environment variable RTTOOL, pointing to wonka release scripts" 1>&2
    exit 1
  else
    source $RTTOOL/j_include
    if [ $? -ne 0 ]; then
      echo "Aborting ..." 1>&2
      exit 1
    fi
  fi
}

# -------------------------------------------------------------------
function showHelp() {
cat <<EOF
  Must execute in the main directory of a particular wonka release
  test directory.
  Creates the requested wonka and oswaldtests builds;
  writes following log files for wonka builds:
   * individual full log info to 'build<nbr>/BUILD<nbr>.log'
   * individual warnings 'build<nbr>/BUILD<nbr>W.log'
   * summary info to './BUILD.log'
  writes following log files for oswaldtests builds:
   * individual full log info to 'build<nbr>/BUILD<nbr>OT.log'
   * individual warnings 'build<nbr>/BUILD<nbr>OTW.log'
   * summary info to './BUILDOT.log'

  usage : $0 [-x] [<key> [<value>] ...]

    -x, if used, must be first parameter; sets script debug mode
    key = --help|-h|-a|-b|-c|-r|-u|-nc|-nn|-no|-nw
    each parameter may occur more than once, though second and
    further occurences of -a, -d and -r are ignored
    --help and -h generate help text
    -a requires a cvs account name as value; uses value of
      'whoami' as default use in combination with -c, -u and
      -r options
    -b requires a value that can be a list of values, separated
      by commas or spaces; the values of several occurences of
      this parameter are accumulated; legal values are 1, 2, 3,
      4, 5, 6, 7, 8, 9, 10, 11, 12, all; the value 'all'
      overwrites all other values; it also is the default value;
      the numbers identify a build of wonka with a particular
      combination of settings:
       1: CPU=arm SCHEDULER=oswald DEBUG=false STATIC=true
       2: CPU=x86 SCHEDULER=oswald DEBUG=false STATIC=true
       3: CPU=arm SCHEDULER=oswald DEBUG=true  STATIC=false
       4: CPU=arm SCHEDULER=oswald DEBUG=false STATIC=false
       5: CPU=arm SCHEDULER=o4p    DEBUG=true  STATIC=false
       6: CPU=arm SCHEDULER=o4p    DEBUG=false STATIC=false
       7: CPU=x86 SCHEDULER=oswald DEBUG=true  STATIC=false
       8: CPU=x86 SCHEDULER=oswald DEBUG=false STATIC=false
       9: CPU=x86 SCHEDULER=o4p    DEBUG=true  STATIC=false
      10: CPU=x86 SCHEDULER=o4p    DEBUG=false STATIC=false
      11: CPU=x86 SCHEDULER=oswald DEBUG=true  STATIC=false AWT_DEVICE=fdev
      12: CPU=x86 SCHEDULER=oswald DEBUG=false STATIC=false AWT_DEVICE=fdev
      21: CPU=arm SCHEDULER=oswald DEBUG=false STATIC=true  COMPILER=j-spot
      22: CPU=x86 SCHEDULER=oswald DEBUG=false STATIC=true  COMPILER=j-spot
      23: CPU=arm SCHEDULER=oswald DEBUG=true  STATIC=false COMPILER=j-spot
      24: CPU=arm SCHEDULER=oswald DEBUG=false STATIC=false COMPILER=j-spot
      25: CPU=arm SCHEDULER=o4p    DEBUG=true  STATIC=false COMPILER=j-spot
      26: CPU=arm SCHEDULER=o4p    DEBUG=false STATIC=false COMPILER=j-spot
      27: CPU=x86 SCHEDULER=oswald DEBUG=true  STATIC=false COMPILER=j-spot
      28: CPU=x86 SCHEDULER=oswald DEBUG=false STATIC=false COMPILER=j-spot
      29: CPU=x86 SCHEDULER=o4p    DEBUG=true  STATIC=false COMPILER=j-spot
      30: CPU=x86 SCHEDULER=o4p    DEBUG=false STATIC=false COMPILER=j-spot
      31: CPU=x86 SCHEDULER=oswald DEBUG=true  STATIC=false AWT_DEVICE=fdev COMPILER=j-spot
      32: CPU=x86 SCHEDULER=oswald DEBUG=false STATIC=false AWT_DEVICE=fdev COMPILER=j-spot
      example:
        mkbuild -b 1 2  -u -b 7,8 9, 10
        will update the sources from cvs, then create builds
        1,2,7,8,9 and 10
    -r requires a legal cvs tag for open-wonka; to parameter
      needs to be used in combinaton with the -c or -u parameters;
      may have to be combined with -a aswell
    -c is a switch indicating that new cvs sources need to be
      checked out; if no cvs tag is specified with -r, the tag HEAD
      is assumed
    -u is a switch indicating that the cvs sources need to be
      updated; if no cvs tag is specified with -r, the tag used
      with the last cvs checkout or cvs update is assumed
    -jc is a switch indicating that a 'jam clean' has to be
      performed beforehand. by default, if possible, existing
      object and library files will be preserved
    -jm is a switch indicating that a 'jam mrproper' has to be
      performed beforehand; by default, if possible, existing
      class, jar, object and library files will be preserved
    -no is a switch indicating that no oswaldtests executable is
      to be build; if not specified, oswaldtests is build
      automatically for builds 1, 2, 3, 4, 7 and 8
    -nw is a switch indicating that no wonka executable is to be
      build; if not specified, wonka executable is always build
    -v : executes builds in verbose mode
EOF
}

# -------------------------------------------------------------------
function checkBuild() {

  legalbuild="1 2 3 4 5 6 7 8 9 10 11 12 21 22 23 24 25 26 27 28 29 31 31 32 all"

  checkb=`echo $1 | sed 's/,/ /g'`           # replace commas by spaces in 'tempbuild'

  # reset 'tempbuild' and rebuild it with only legal arguments from 'checkb'
  tempbuild=

  for y in $checkb; do
    found=
    for u in $legalbuild; do
      if [ "$y" = "$u" ]; then
        found=true
        break
      fi
    done
    if [ ! $found ]; then
      echo "$y : illegal value for -b (build) option" 1>&2
      tempbuild=error
      break                                          # do not continue checking if an error occured
    else
      if [ -z "$tempbuild" ]; then
        tempbuild=$y
      else
        tempbuild=$tempbuild" "$y
      fi
    fi
  done
}

# -------------------------------------------------------------------
function checkDistribution() {

  local legaldistribution="debian redhat suse default"
  local found=

  for u in $legaldistribution; do
    if [ $1 = $u ]; then
      found=true
      break
    fi
  done
  if [ ! $found ]; then
    echo "$1 : illegal value for -d (distribution) option" 1>&2
    distribution=error
  fi
}

# ------------------------------------------------------------------------------
function getArgs () {

  if [ $1 ] && [ $1 = -x ]; then
    shift
    set -x
  fi

  cvsaccount=
  distribution=
  cvsrevision=
  cvsupdate=
  cvscheckout=
  build=
  unknownoption=
  cleanbuild=
  nativebuild=
  javabuild=
  no_wonkabuild=
  no_oswaldbuild=
  VERBOSE=

  while [ $# -gt 0 ]; do
    case $1 in
      --help | -h )
        showHelp
        exit 0
        ;;
      -v )
        VERBOSE=true
        ;;
      -a )
        if [ -z $cvsaccount ]; then
          if [ ! $2 ] || [ ${2#-} != $2 ];  then
            cvsaccount=error
            echo "missing value for -a (cvsaccount) option" 1>&2
          else
            cvsaccount=$2
            shift
          fi
        fi
        ;;
      -c )
        if [ $cvsupdate ]; then
          echo "$0 aborted: options -c and -u incompatible" 1>&2
        else
          cvscheckout=true
        fi
        ;;
      -u )
        if [ $cvscheckout ]; then
          echo "$0 aborted: options -c and -u incompatible" 1>&2
        else
          cvsupdate=true
        fi
        ;;
      -r )
        if [ -z $cvsrevision ]; then
          if [ ! $2 ] || [ ${2#-} != $2 ];  then
            cvsrevision=error
            echo "missing value for -r (cvsrevision) option" 1>&2
          else
            cvsrevision=$2
            shift
          fi
        fi
        ;;
      -b)
        if [ "$build" != "error" ]; then                 # else, an illegal value occured earlier
          if [ ! $2 ] || [ ${2#-} != $2 ]; then
            build=error
            echo "missing value for -b (build) option" 1>&2
          else
            tempbuild=
            while [ $2 ] && [ ${2#-} = $2 ]; do          # no minus sign in next cmdline argument
              checkBuild $2
              if [ "$tempbuild" = "error" ]; then
                build=error
              else
                for v in $tempbuild; do
                  if [ -z "$build" ]; then               # for the first $2, $build is still empty
                    build=$v
                  else
                    if [ "$build" != "all" ]; then       # else ignore $2
                      if [ "$v" = "all" ]; then
                        build=$v                         # 'all' overwrites other values
                      else
                        build=$build" "$v                # values of several occurences are concatenated
                      fi
                    fi
                  fi
                done
              fi
              shift
            done
#           if [ -z "$build" ]; then                     # an illegal value occured
#             build=error
#           fi
          fi
        fi
        ;;

      -jc)
        jamclean=true
        ;;
      -jm)
        jammrproper=true
        ;;
      -no)
        no_oswaldbuild=true
        ;;
      -nw)
        no_wonkabuild=true
        ;;
      *)
        echo "$1 : unknown option" 1>&2
        unknownoption=error
        ;;
    esac
    shift
  done

  # abort if errors detected (prefix with 'x' to avoid emty strings)

  if [ x$cvsaccount = x"error" ] || [ x$distribution = x"error" ] || [ x$cvsrevision = x"error" ] ||
     [ x"$build" = x"error" ] || [ $unknownoption ]
  then
    echo "$0 aborted: parameter errors; try option --help" 1>&2
    set -
    exit 1
  fi

  # test strings for zero length and assign defaults

  if [ -z $distribution ]; then
    distribution=default
  fi

  if [ -z $cvsrevision ]; then
    cvsrevision=
  fi

  if [ -z $cvsupdate ]; then
    cvsupdate=
  fi

  if [ -z $cvscheckout ]; then
    cvscheckout=
  fi

  if [ -z "$build" ]; then
    j_abort 1 "error: missing mandatory option '-b'."
  fi

  if [ "$build" = "all" ]; then
    build="1 2 3 4 5 6 7 8 9 10 11 12"
  fi

  if [ -z $no_wonkabuild ]; then
    no_wonkabuild=
  fi

  if [ -z $no_oswaldbuild ]; then
    no_oswaldbuild=
  fi

  if [ -z $jamclean ]; then
    jamclean=
  fi

  if [ -z $jammrproper ]; then
    jammrproper=
  fi
  if [ -z $cvscheckout ] && [ -z $cvsupdate ] ; then
    if [ $cvsrevision ]; then
      j_abort 1 "error: -r option specified without -c or -u option."
    fi
    if [ $cvsaccount ]; then
      j_abort 1 "error: -a option specified without -c or -u option."
    fi
  else
    if [ -z $cvsaccount ]; then
      cvsaccount=`whoami`
    fi
  fi



}

# ------------------------------------------------------------------------------
function getSources () {

cvsserver=cvs.leuven.intern.acunia.com

if [ $cvscheckout ] || [ $cvsupdate ] ; then
  rsh -l ${cvsaccount} ${cvsserver} 'test -d /home/cvs'
  j_abort $? "cvs server or cvs account unknown."

  if [ ! -d test-log ]; then
    j_continue "Directory 'test-log' not found. Create it?"
    if [ $REPLY = "y" ]; then
      mkdir ./test-log
    else
      j_abort
    fi
  fi
else
  echo "NO CHECK-OUT OR UPDATE OF SOURCES REQUESTED $(date +%Y/%m/%d%t%H:%M:%S)" > CVS.log
  return 0
fi


if [ $cvscheckout ];then

  echo "checking out sources ... (see test-log/cvs.log)"
  if [ -d open-wonka ]; then
    rm -rf open-wonka
  fi
  if [ $cvsrevision ]; then
    if [ -z $VERBOSE ]; then
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs checkout -r ${cvsrevision} open-wonka  &> test-log/cvs.log
    else
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs checkout -r ${cvsrevision} open-wonka  | tee test-log/cvs.log
    fi
  else
    if [ -z $VERBOSE ]; then
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs checkout -r HEAD open-wonka  &> test-log/cvs.log
    else
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs checkout -r HEAD open-wonka  | tee test-log/cvs.log
    fi
  fi
  j_abort $? "cvs check-out failed; see test-log/cvs.log"

  echo "CVS CHECK-OUT PASS  $(date +%Y/%m/%d%t%H:%M:%S)" > CVS.log

  return 0
fi

if [ $cvsupdate ];then

  if [ ! -d open-wonka ]; then
    j_abort 1 "cannot update sources; directory 'open-wonka' not found."
  fi
  echo "updating sources ... (see test-log/cvs.log)"
  if [ $cvsrevision ]; then
    if [ -z $VERBOSE ]; then
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs update -P -d -r ${cvsrevision} open-wonka  &> test-log/cvs.log
    else
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs update -P -d -r ${cvsrevision} open-wonka  | tee test-log/cvs.log
    fi
  else
    if [ -z $VERBOSE ]; then
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs update -P -d open-wonka  &> test-log/cvs.log
    else
      cvs -d ${cvsaccount}@${cvsserver}:/home/cvs update -P -d open-wonka  | tee test-log/cvs.log
    fi
  fi
  j_abort $? "cvs update failed; see test-log/cvs.log"

  echo "CVS UPDATE PASS  $(date +%Y/%m/%d%t%H:%M:%S)" > CVS.log

  return 0
fi

}

# ------------------------------------------------------------------------------
function buildWonka () {

  if [ -z $no_wonkabuild ]; then

    echo Begin ${BUILDNAME} wonka


    # remove possible remains in open-wonka of native object files and libraries
    if [ -d build-${_cpu}-linux ]; then
      rm -rf build-${_cpu}-linux
    fi


    # try to restore open-wonka from a build directory if it exists

    if [ -d ../${BUILDDIR} ]; then

      # restore build-${_cpu}-linux directory if possible
      if [ -d ../${BUILDDIR}/build-${_cpu}-linux ]; then
        if [ $cvscheckout ] || [ $jammrproper ]; then
          rm -rf ../${BUILDDIR}/build-${_cpu}-linux
        else
          mv ../${BUILDDIR}/build-${_cpu}-linux .
        fi
      fi

      # restore build-${_cpu}-linux/wonka/ directory if possible
      if [ -d ../${BUILDDIR}/fsroot ]; then
        if [ -d build-${_cpu}-linux/wonka ]; then
          mv ../${BUILDDIR}/fsroot build-${_cpu}-linux/wonka
        else
          rm -rf ../${BUILDDIR}/fsroot
        fi
      fi

      if [ -f ../${BUILDDIR}/wonka ]; then
        if [ -d build-${_cpu}-linux/wonka ]; then
          mv ../${BUILDDIR}/wonka build-${_cpu}-linux/wonka
        else
          rm ../${BUILDDIR}/wonka
        fi
      fi

    else
      mkdir ../${BUILDDIR}
    fi

    # after all restore attempts, perform a 'jam clean' if requested
    if [ $jamclean ] && [ -d build-${_cpu}-linux ] ; then
      if [ -z $VERBOSE ]; then
        jam -sCPU=$_cpu clean &> /dev/null
      else
        jam -sCPU=$_cpu clean
      fi
    fi

    if [ $distribution = "debian" ] || [ $distribution = "redhat" ]; then
      _javac=jikes.$distribution
    else
      _javac=jikes
    fi

    echo " jam -sJAVAC=$_javac -sCPU=$_cpu -sDEBUG=$_debug -sSTATIC=$_static -sSCHEDULER=$_scheduler -sAWT_DEVICE=$_awt_device -sCOMPILER=$_compiler install"
    if [ -z $VERBOSE ]; then
      jam -sJAVAC=$_javac -sCPU=$_cpu -sDEBUG=$_debug -sSTATIC=$_static -sSCHEDULER=$_scheduler -sAWT_DEVICE=$_awt_device -sCOMPILER=$_compiler install &> ../${BUILDDIR}/${BUILDNAME}.log
    else
      jam -sJAVAC=$_javac -sCPU=$_cpu -sDEBUG=$_debug -sSTATIC=$_static -sSCHEDULER=$_scheduler -sAWT_DEVICE=$_awt_device -sCOMPILER=$_compiler install | tee ../${BUILDDIR}/${BUILDNAME}.log
    fi

    if [ $? -eq 0 ]; then

      grep -a -B 2 -e"warning:" -e"Warning:" ../${BUILDDIR}/${BUILDNAME}.log  > ../${BUILDDIR}/${BUILDNAME}W.log
      if [ -s ../${BUILDDIR}/${BUILDNAME}W.log ]; then
        echo WONKA BUILD PASS with WARNINGS: see ${BUILDDIR}/${BUILDNAME}W.log
        echo "${BUILDNAME}: WONKA BUILD PASS with WARNINGS  $(date +%Y/%m/%d%t%H:%M:%S)" >> ../BUILD.log
        echo "" >> ../BUILD.log
        cat ../${BUILDDIR}/${BUILDNAME}W.log >> ../BUILD.log
      else
        echo "${BUILDNAME}: WONKA BUILD PASS  $(date +%Y/%m/%d%t%H:%M:%S)" | tee -a ../BUILD.log
      fi

    else

      echo "WONKA BUILD FAIL: see ${BUILDDIR}/${BUILDNAME}.log"
      echo "${BUILDNAME}: WONKA BUILD FAIL  $(date +%Y/%m/%d%t%H:%M:%S)" >> ../BUILD.log
      echo "" >> ../BUILD.log
      grep -a -A 1 -B 1 -e"command not found" -e"No such file or directory" -e"don't know how to make" -e"In function" -e"undefined" -e"failed" -e"skipped" ../${BUILDDIR}/${BUILDNAME}.log  >> ../BUILD.log

    fi

    # strip wonka executable if _debug=false, and move fsroot directory,
    # wonka executable and build directory

    if [ -d build-${_cpu}-linux ]; then
      if [ -f build-${_cpu}-linux/wonka/wonka ]; then
        if [ $_debug = false ] || [ $_cpu = arm ]; then
          `${stripit} build-${_cpu}-linux/wonka/wonka`
        fi
        mv build-${_cpu}-linux/wonka/fsroot ../${BUILDDIR}
        mv build-${_cpu}-linux/wonka/wonka  ../${BUILDDIR}
      fi
      mv build-${_cpu}-linux ../${BUILDDIR}
    fi

    wonkabuild=true        # signal to a possible subsequent 'buildOswaldtests', that
                           # wonka was just generated for the same build

    echo End $BUILDNAME wonka;

  fi
}

# ------------------------------------------------------------------------------
function buildOswaldtests () {

  if [ -z $no_oswaldbuild ]; then

    echo Begin ${BUILDNAME} oswaldtests

    # remove possible remains in open-wonka of native objects and libraries
    if [ -d build-${_cpu}-linux ]; then
      rm -rf build-${_cpu}-linux
    fi

    # try to restore open-wonka from the build directory if the latter exists
    # reuse intermediate results of a call to 'buildwonka' if that just occured for the same build.
    if [ -d ../${BUILDDIR} ]; then

      if [ -d ../${BUILDDIR}/build-${_cpu}-linux ]; then
        if [ -z $wonkabuild ] && ( [ $cvscheckout ] || [ $jammrproper ] ) ; then
          rm -rf ../${BUILDDIR}/build-${_cpu}-linux
        else
          mv ../${BUILDDIR}/build-${_cpu}-linux .
        fi
      fi

      if [ -f ../${BUILDDIR}/oswaldtests ]; then
        if [ -d build-${_cpu}-linux/kernel/oswald/tests ]; then
          mv ../${BUILDDIR}/oswaldtests build-${_cpu}-linux/kernel/oswald/tests
        else
          rm ../${BUILDDIR}/oswaldtests
        fi
      fi

    else
      mkdir ../${BUILDDIR}
    fi

    if [ $jamclean ] && [ -d build-${_cpu}-linux ]; then
      if [ -z $VERBOSE ]; then
        jam -sCPU=$_cpu clean &> /dev/null
      else
        jam -sCPU=$_cpu clean
      fi
    fi

    wonkabuild=

    echo " jam -sCPU=$_cpu -sDEBUG=$_debug -sSTATIC=$_static oswaldtests"
    if [ -z $VERBOSE ]; then
      jam -sCPU=$_cpu -sDEBUG=$_debug -sSTATIC=$_static oswaldtests &> ../${BUILDDIR}/${BUILDNAME}OT.log
    else
      jam -sCPU=$_cpu -sDEBUG=$_debug -sSTATIC=$_static oswaldtests | tee ../${BUILDDIR}/${BUILDNAME}OT.log
    fi
    if [ $? -eq 0 ]; then
      grep -a -B 2 -e"warning:" -e"Warning:" ../${BUILDDIR}/${BUILDNAME}OT.log  > ../${BUILDDIR}/${BUILDNAME}OTW.log
      if [ -s ../${BUILDDIR}/${BUILDNAME}OTW.log ]; then
         echo OSWALDTESTS BUILD PASS with WARNINGS: see ${BUILDDIR}/${BUILDNAME}OTW.log
         echo "${BUILDNAME}: OSWALDTESTS BUILD PASS with WARNINGS  $(date +%Y/%m/%d%t%H:%M:%S)" >> ../BUILDOT.log
         echo "" >> ../BUILDOT.log
         cat ../${BUILDDIR}/${BUILDNAME}OTW.log >> ../BUILDOT.log
      else
         echo OSWALDTESTS BUILD PASS
         echo "${BUILDNAME}: OSWALDTESTS BUILD PASS  $(date +%Y/%m/%d%t%H:%M:%S)" >> ../BUILDOT.log
      fi
    else
      echo OSWALDTESTS BUILD FAIL: see ${BUILDDIR}/${BUILDNAME}OT.log
      echo "${BUILDNAME}: OSWALDTESTS BUILD FAIL $(date +%Y/%m/%d%t%H:%M:%S)" >> ../BUILDOT.log
      echo "" >> ../BUILDOT.log
      grep -a -A 1 -B 1 -e"command not found" -e"No such file or directory" -e"don't know how to make" -e"In function" -e"undefined" -e"failed" -e"skipped" ../${BUILDDIR}/${BUILDNAME}OT.log >> ../BUILDOT.log
    fi

    if [ -d build-${_cpu}-linux ]; then
      if [ -f build-${_cpu}-linux/kernel/oswald/tests/oswaldtests ]; then
        if [ $_debug = false ] || [ $_cpu = arm ]; then
          `${stripit} build-${_cpu}-linux/kernel/oswald/tests/oswaldtests`
        fi
        mv build-${_cpu}-linux/kernel/oswald/tests/oswaldtests ../${BUILDDIR}
      fi
      mv build-${_cpu}-linux ../${BUILDDIR}
    fi

    echo End $BUILDNAME oswaldtests

  fi
}


# ------------------------------------------------------------------------------
function mkBuild1(){
  if [ distribution != debian ] && [ distribution != redhat ]; then
    _compiler=none
    _cpu=arm
    _debug=false
    _static=true
    _scheduler=oswald
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka
    buildOswaldtests
  fi
}

# ------------------------------------------------------------------------------
function mkBuild2(){
  if [ distribution != debian ] ; then

    _compiler=none
    _cpu=x86
    _debug=false
    _static=true
    _scheduler=oswald
    _awt_device=xsim
    stripit=strip
    buildWonka
    buildOswaldtests

  fi

}

# ------------------------------------------------------------------------------
function mkBuild3(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=none
    _cpu=arm
    _debug=true
    _static=false
    _scheduler=oswald
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka
    buildOswaldtests

  fi
}

# ------------------------------------------------------------------------------
function mkBuild4(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=none
    _cpu=arm
    _debug=false
    _static=false
    _scheduler=oswald
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka
    buildOswaldtests

  fi
}

# ------------------------------------------------------------------------------
function mkBuild5(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=none
    _cpu=arm
    _debug=true
    _static=false
    _scheduler=o4p
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka

  fi
}

# ------------------------------------------------------------------------------
function mkBuild6(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=none
    _cpu=arm
    _debug=false
    _static=false
    _scheduler=o4p
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka

  fi
}

# ------------------------------------------------------------------------------
function mkBuild7(){
  _compiler=none
  _cpu=x86
  _debug=true
  _static=false
  _scheduler=oswald
  _awt_device=xsim
  stripit=strip
  buildWonka
  buildOswaldtests
}


# ------------------------------------------------------------------------------
function mkBuild8(){
  _compiler=none
  _cpu=x86
  _debug=false
  _static=false
  _scheduler=oswald
  _awt_device=xsim
  stripit=strip
  buildWonka
  buildOswaldtests
}


# ------------------------------------------------------------------------------
function mkBuild9(){
  _compiler=none
  _cpu=x86
  _debug=true
  _static=false
  _scheduler=o4p
  _awt_device=xsim
  stripit=strip
  buildWonka
}

# ------------------------------------------------------------------------------
function mkBuild10(){
  _compiler=none
  _cpu=x86
  _debug=false
  _static=false
  _scheduler=o4p
  _awt_device=xsim
  stripit=strip
  buildWonka
}

# ------------------------------------------------------------------------------
function mkBuild11(){
  _compiler=none
  _cpu=x86
  _debug=true
  _static=false
  _scheduler=oswald
  _awt_device=fdev
  stripit=strip
  buildWonka
  buildOswaldtests
}


# ------------------------------------------------------------------------------
function mkBuild12(){
  _compiler=none
  _cpu=x86
  _debug=false
  _static=false
  _scheduler=oswald
  _awt_device=fdev
  stripit=strip
  buildWonka
  buildOswaldtests
}

# ------------------------------------------------------------------------------
function mkBuild21(){
  if [ distribution != debian ] && [ distribution != redhat ]; then
    _compiler=j-spot
    _cpu=arm
    _debug=false
    _static=true
    _scheduler=oswald
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka
    buildOswaldtests
  fi
}

# ------------------------------------------------------------------------------
function mkBuild22(){
  if [ distribution != debian ] ; then

    _compiler=j-spot
    _cpu=x86
    _debug=false
    _static=true
    _scheduler=oswald
    _awt_device=xsim
    stripit=strip
    buildWonka
    buildOswaldtests

  fi

}

# ------------------------------------------------------------------------------
function mkBuild23(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=j-spot
    _cpu=arm
    _debug=true
    _static=false
    _scheduler=oswald
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka
    buildOswaldtests

  fi
}

# ------------------------------------------------------------------------------
function mkBuild24(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=j-spot
    _cpu=arm
    _debug=false
    _static=false
    _scheduler=oswald
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka
    buildOswaldtests

  fi
}

# ------------------------------------------------------------------------------
function mkBuild25(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=j-spot
    _cpu=arm
    _debug=true
    _static=false
    _scheduler=o4p
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka

  fi
}

# ------------------------------------------------------------------------------
function mkBuild26(){
  if [ distribution != debian ] && [ distribution != redhat ]; then

    _compiler=j-spot
    _cpu=arm
    _debug=false
    _static=false
    _scheduler=o4p
    _awt_device=fdev
    stripit=arm-linux-strip
    buildWonka

  fi
}

# ------------------------------------------------------------------------------
function mkBuild27(){
  _compiler=j-spot
  _cpu=x86
  _debug=true
  _static=false
  _scheduler=oswald
  _awt_device=xsim
  stripit=strip
  buildWonka
  buildOswaldtests
}


# ------------------------------------------------------------------------------
function mkBuild28(){
  _compiler=j-spot
  _cpu=x86
  _debug=false
  _static=false
  _scheduler=oswald
  _awt_device=xsim
  stripit=strip
  buildWonka
  buildOswaldtests
}


# ------------------------------------------------------------------------------
function mkBuild29(){
  _compiler=j-spot
  _cpu=x86
  _debug=true
  _static=false
  _scheduler=o4p
  _awt_device=xsim
  stripit=strip
  buildWonka
}

# ------------------------------------------------------------------------------
function mkBuild30(){
  _compiler=j-spot
  _cpu=x86
  _debug=false
  _static=false
  _scheduler=o4p
  _awt_device=xsim
  stripit=strip
  buildWonka
}

# ------------------------------------------------------------------------------
function mkBuild31(){
  _compiler=j-spot
  _cpu=x86
  _debug=true
  _static=false
  _scheduler=oswald
  _awt_device=fdev
  stripit=strip
  buildWonka
  buildOswaldtests
}


# ------------------------------------------------------------------------------
function mkBuild32(){
  _compiler=j-spot
  _cpu=x86
  _debug=false
  _static=false
  _scheduler=oswald
  _awt_device=fdev
  stripit=strip
  buildWonka
  buildOswaldtests
}

# ------------------------------------------------------------------------------

# MAIN -------------------------------------------------------------------------

# don't even start if environment variable RTTOOL is not defined or
# sourcing $RTTOOL/j_include didn't work

checkTools

# don't even start if important utilities are not accessible

j_checkUtils jam zip unzip

getArgs $*   # sets 'build'

if [ -z $no_wonkabuild ] || [ -z $no_oswaldbuild ]; then
  checkCompileTools $build
fi

getSources

cd open-wonka
j_abort $?     # abort if directory 'open-wonka' not found.

export CLASSPATH=
export WONKA_CONFIG=
export WONKA_TOP=$PWD

if [ $cvscheckout ] || [ $jammrproper ] ; then
  if [ -d class ]; then
    rm -rf class
  fi
fi

# start with clean log files
if [ -z $no_wonkabuild ] && [ -e ../BUILD.log ]; then
  rm ../BUILD.log
fi
if [ -z $no_oswaldbuild ] && [ -e ../BUILDOT.log ]; then
  rm ../BUILDOT.log
fi

for b in $build; do
  BUILDDIR=build$b
  BUILDNAME=BUILD$b
  mkBuild$b
done

set -
exit 0

# END MAIN ---------------------------------------------------------------------


