#!/bin/bash

###########################################################################
# Copyright (c) 2001 by Punch Telematix. All rights reserved.             #
#                                                                         #
# Redistribution and use in source and binary forms, with or without      #
# modification, are permitted provided that the following conditions      #
# are met:                                                                #
# 1. Redistributions of source code must retain the above copyright       #
#    notice, this list of conditions and the following disclaimer.        #
# 2. Redistributions in binary form must reproduce the above copyright    #
#    notice, this list of conditions and the following disclaimer in the  #
#    documentation and/or other materials provided with the distribution. #
# 3. Neither the name of Punch Telematix nor the names of other           #
#    contributors may be used to endorse or promote products derived      #
#    from this software without specific prior written permission.        #
#                                                                         #
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED          #
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    #
# IN NO EVENT SHALL PUNCH TELEMATIX OR OTHER CONTRIBUTORS BE LIABLE       #
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR            #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR         #
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   #
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    #
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  #
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           #
###########################################################################

# -------------------------------------------------------------------
function checkTools() {
  if [ -z $RTTOOL ] ; then
    echo "Environment variable RTTOOL not defined. Cannot proceed." 1>&2
    exit 1
  else
    source $RTTOOL/j_include
    if [ $? -ne 0 ]; then
      echo "Aborting ..." 1>&2
      exit 1
    fi
  fi
}

# -----------------------------------------------------------------------------

function showHelp() {
  cat <<EOF
  usage: $0 [-x][-v][ --help | -h ] [-e editor] [-cf config file]
            [-nc] [-nb] [-nt] [<build nbr > ...] ] [all]

      -x must be first parameter; sets script debug mode
      --help and -h generate this help text
      -cf config file : specify the config file that initialises
         internal settings.
         Default is ./reltest.cfg. If default not found, internal
         default settings are used. (see $RTTOOL for an example)
      -e editor : specify the text editor to use to open the
         log files that still need some manual completion
      -nc specify that no new wonka sources must be checked out before
         to start the build.
      -nb specify that no new builds have to be generated; implies -nc.
          for use on test platform if different from build platform
      -nt specify that no tests have to be executed.
          for use on build platform if different from test platform.
      -v executes builds and tests in verbose mode"

      subsequent parameters are a list of build numbers, or the keyword 'all'
      keyword 'all' or no build numbers indicate all builds are to be processed
      Execute from within the main directory of a particular release version.
      Check out new wonka sources, builds wonka and oswaldtests, runs oswaldtest,
      runs mauve tests, and fionally runs vte tests.
EOF
}

# -----------------------------------------------------------------------------

function getArgs() {

  if [ $1 ] && [ $1 = -x ]; then
    j_scriptDebug -x # sets script debug mode; stores state in J_DEBUG
    shift
  fi

  unknownoption=
  builds=
  EDIT=$EDITOR
  nocheckout=
  notest=
  nobuild=

  while [ $# -gt 0 ]; do
    case $1 in
      --help | -h )
         showHelp
         set -
         exit
         ;;
      -v )
         VERBOSE=-v
         ;;
      -e )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           EDIT=error
           echo "missing value for -e (editor) option" 1>&2
         else
           EDIT=$2
           shift
         fi
         ;;
      -cf )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           CONFIGFILE=error
           echo "missing value for -cf (config) option" 1>&2
         else
           CONFIGFILE=$2
           shift
         fi
         ;;
      -nc )
         nocheckout=true
         ;;
      -nb )
         nobuild=true;
         nocheckout=true;
         ;;
      -nt )
         notest=true
         ;;
      1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 )
         builds=$builds$1" "
         ;;
      all )
         builds="1 2 3 4 5 6 7 8 9 10 11 12 21 22 23 24 25 26 27 28 29 30 31 32"
         ;;
      * )
         echo "$1 : unknown option" 1>&2
         unknownoption=error
         ;;
    esac
    shift
  done


  if [ "$EDIT" = error ] || [ "$CONFIGFILE" = error ] || [ $unknownoption ]; then
    echo "$0 aborted: parameter errors; try option --help" 1>&2
    set -
    exit
  fi

  if [ -z $notest ]; then
    if [ -z $EDIT ]; then
      echo "$0 aborted: no editor specified; use -e option or export 'EDITOR'" 1>&2
      set -
      exit
    else
      j_which $EDIT &>/dev/null
      if [ $? -ne 0 ]; then
        echo "$0 aborted: editor $EDIT not found" 1>&2
        set -
        exit $J_ERROR
      fi
    fi
  fi

  if [ -z $notest ] || [ -z $nobuild ]; then
    if [ -z "$builds" ]; then
      echo "$0 aborted: must specify at least one build number" 1>&2
      set -
      exit
    fi
  fi


}

# -----------------------------------------------------------------------------
function getConfig(){

  j_configure $1

  if [ $? -ne 0 ]; then
    echo "Config file '$1' not found. Aborting ..." 1>&2
    exit 1
  fi

  if [ -z VTESLEEPTIME ] ; then
    VTESLEEPTIME=100               # time interval between visual tests (msec)
  fi
  if [ -z VTEMAXTIME ] ; then
    VTEMAXTIME=1440                # maxtime for vtetests (min)
  fi
  if [ -z OSMAXTIME ] ; then
    OSMAXTIME=3600                 # maxtime for oswaldtests (sec)
  fi
  if [ -z MAUCYCLES ]; then
    MAUCYCLES=15                   # nbr of times to repeat mauve tests
  fi
  if [ -z MAUSLEEPTIME ]; then
    MAUSLEEPTIME=60                # time interval for checking mauve tests progress (sec)
  fi
  if [ -z MAUMAXTIME ]; then
    MAUMAXTIME=1500                # maxtime allowed for mauve test to run (sec)
  fi
}

# MAIN ------------------------------------------------------------------------

checkTools


# define global parameters

nocheckout=                 # specifies whether a fresh checkout is required or not; set by 'getArgs'
nobuild=                    # specifies whether any fresh builds are required or not; set by 'getArgs'
notest=                     # specifies whether tests have to be executed or not; set by 'getArgs'
LOGFILE=                    # name of log file in start up dir
EDIT=                       # name of editor to use to edit logfile at end of execution; set by 'getArgs'
builds=                     # list of requested buildnumbers; set by 'getArgs'
BUILD=                      # id number of requested build
BUILDDIR=                   # sub directory of start-up dir where build will be realized.
STARTDIR=$PWD               # current dir at start-up
VERBOSE=                    # set by 'getArgs'; if set, builds and tests are executed in verbose mode
CONFIGFILE=                 # configuration file


# process commandline arguments

getArgs $*

# process configfile;
# variables that need to be set in config file
VTESLEEPTIME=             # time interval between visual tests (msec)
VTEMAXTIME=               # maxtime for vtetests (sec)
OSMAXTIME=                # maxtime for oswaldtests (sec)
MAUCYCLES=                # nbr of times to repeat mauve tests
MAUSLEEPTIME=             # time interval for checking mauve tests progress (sec)
MAUMAXTIME=               # maxtime allowed for mauve test to run (sec)
getConfig $CONFIGFILE


for BUILD in $builds; do
  BUILDDIR=build$BUILD
  LOGFILE=$(date +%Y%m%d)$BUILDDIR

  # build wonka and oswaldtests

  starttime=$(date +%Y/%m/%d%t%H:%M:%S)
  if [ -z $nobuild ]; then
    if [ -z $nocheckout ]; then
      $RTTOOL/mkbuild $J_DEBUG $VERBOSE -a vandeneede -c -r HEAD -b $BUILD
    else
      $RTTOOL/mkbuild $J_DEBUG $VERBOSE -jm -b $BUILD
    fi
    j_abort $?
    nocheckout=true
  fi


  if [ -z $notest ]; then

    echo "DAILY TESTS WONKA HEAD VERSION"   > $LOGFILE
    echo "-------------------------------" >> $LOGFILE
    echo "Date: $starttime" >> $LOGFILE
    echo "--------------------------------" >> $LOGFILE
    echo "Configuration: $DISTRIBUTION" >> $LOGFILE
    echo "----------------------------" >> $LOGFILE
    echo "Build$BUILD: DEBUG=false, STATIC=false, SCHEDULER=oswald, CPU=x86" >> $LOGFILE
    echo "-------------------------------------------------------------" >> $LOGFILE
    echo "" >> $LOGFILE
    echo "" >> $LOGFILE
    cat CVS.log >> $LOGFILE
    echo "" >> $LOGFILE
    echo "" >> $LOGFILE
    cat BUILD.log >> $LOGFILE
    echo "" >> $LOGFILE
    echo "" >> $LOGFILE
    cat BUILDOT.log >> $LOGFILE
    echo "" >> $LOGFILE
    echo "" >> $LOGFILE


    #  run oswald tests

    $RTTOOL/otest $J_DEBUG $VERBOSE -m $OSMAXTIME $BUILD
    if [ -d $BUILDDIR ]; then
      cat ${BUILDDIR}/BUILD${BUILD}-OSWALD.log >> $LOGFILE
    else
      cat BUILD${BUILD}-OSWALD.log >> $LOGFILE
    fi
    echo "" >> $LOGFILE
    echo "" >> $LOGFILE


    #  run mauve tests

    $RTTOOL/mtest $J_DEBUG $VERBOSE -m $MAUMAXTIME -s $MAUSLEEPTIME -n $MAUCYCLES $BUILD
    if [ -d $BUILDDIR ]; then
      cat $BUILDDIR/BUILD${BUILD}-MAUVE.log >> $LOGFILE
    else
      cat BUILD${BUILD}-MAUVE.log >> $LOGFILE
    fi
    echo "" >> $LOGFILE
    echo "" >> $LOGFILE

    #  run stress tests

    if [ -f $BUILDDIR/wonka ]; then
      j_changeVteProperties $BUILDDIR $VTESLEEPTIME true $VTEMAXTIME
      cd $BUILDDIR
      starttime=$(date +%Y/%m/%d%t%H:%M:%S)
      if [ -z $VERBOSE ]; then
        ./wonka > /dev/null   &
      else
        ./wonka  &
      fi
      stresstest=$!
      cd $STARTDIR
    fi

    CURRENTDEBUG=$J_DEBUG           # save current script debug state
    j_scriptDebug                   # reset script debug
    REPLY=
    while [ "$REPLY" != "PASS" ] && [ "$REPLY" != "FAIL" ]; do
      echo -n "Reply with PASS or FAIL :"
      read
    done
    j_scriptDebug $CURRENTDEBUG     # restore debug state

    if [ -f $BUILDDIR/wonka ]; then
      echo "BUILD${BUILD}: VTE STRESS TESTS ${REPLY} $(date +%Y/%m/%d%t%H:%M:%S)"  >> $LOGFILE
      echo "  sleeptime=${VTESTIME}ms" >> $LOGFILE
      echo "  started on $starttime" >> $LOGFILE
      echo "  still running" >> $LOGFILE
      tail -12 $BUILDDIR/fsroot/vte.log >> $LOGFILE
    else
      echo "BUILD${BUILD}: VTE STRESS TESTS NOT PERFORMED $(date +%Y/%m/%d%t%H:%M:%S)"  >> $LOGFILE
      echo "" >> $LOGFILE
      echo "  file $BUILDDIR/wonka not found." >> $LOGFILE
    fi
    $EDIT $LOGFILE

    j_scriptDebug                  # reset script debug
    j_continue "Mail test report to wonka team? "
    if [ "$REPLY" = y ] ;then
      mail -s WONKA_HEAD wonka@acunia.com < $LOGFILE
    fi

    ps -p $stresstest > /dev/null
    if [ $? -eq 0 ]; then
      j_continue "Stop stress tests? "
      if [ "$REPLY" = y ] ;then
        kill -9 $stresstest
      fi
    fi

  fi  # if [ -z $notest ]

done




