###########################################################################
# Copyright (c) 2001 by Punch Telematix. All rights reserved.             #
#                                                                         #
# Redistribution and use in source and binary forms, with or without      #
# modification, are permitted provided that the following conditions      #
# are met:                                                                #
# 1. Redistributions of source code must retain the above copyright       #
#    notice, this list of conditions and the following disclaimer.        #
# 2. Redistributions in binary form must reproduce the above copyright    #
#    notice, this list of conditions and the following disclaimer in the  #
#    documentation and/or other materials provided with the distribution. #
# 3. Neither the name of Punch Telematix nor the names of other           #
#    contributors may be used to endorse or promote products derived      #
#    from this software without specific prior written permission.        #
#                                                                         #
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED          #
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    #
# IN NO EVENT SHALL PUNCH TELEMATIX OR OTHER CONTRIBUTORS BE LIABLE       #
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR            #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR         #
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   #
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    #
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  #
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           #
###########################################################################

The scripts in this directory currently automate about 80% of the wonka unit
testing job. These scripts are in continuous evolution.
Most scripts show "how-to-use" info when executed with a -h or --help option.
Most scripts accept as first parameter the "-x" option which sets script debug
mode execution of scripts on.
Most scripts assume that environment variable RTTOOL (release test tools)
points to a directory where the scripts described here can be found.
Some scripts check the existence and reachability of tools before proceding
(gcc, strip, ..)
For more information on particular scripts, use their help functions.


j_include
---------
Function definitions used by most scripts. To define the functions the
file is sourced by the scripts that use them. This neccessitates the
definition of the environment variable "RTTOOL"
A possible future improvement is to add an export statement in the config
file (reltest.cfg, see below) defining RTTOOL.

reltest.cfg
----------
An sample configuration file currently only used by the script 'headtest' and
currently defining only a few test parameters (see headtest below).

Extending its use to other scripts and for more parameters would be usefull.

headtest
--------
Performs a number of serialized tests:
- checks out the cvs head version of wonka and creates the specified wonka and
oswaldtests build(s) using 'mkbuild'
- performs the oswaldtests for this build using 'otest'
- performs the mauve tests for this build using 'mtest'
- performs vte stress tests for this build (currently not yet using 'vtest')
- prompts, while vte tests are running, a user to type 'PASS' or 'FAIL' on the
command line (difficult to see when a debug version is printing to the screen)
- then edits a global result file which the user can review and modify.
- When the user closes the edit session the results file is optinally mailed
using 'sendmail' to 'wonka@acunia.com'.
- After that the user can optionally stop the visual stress test, or leave
it running in background.

via a user specified config file, the user can set :
VTESLEEPTIME            # period of time that each individual visual test is run (msec)
VTEMAXTIME              # total elapsed time period for vte tests to run (min)
OSMAXTIME               # total elapsed time period for oswaldtests to run (sec)
MAUCYCLES               # nbr of times to repeat mauve test suite
MAUSLEEPTIME            # time interval between checks to verify that mauve tests'
                        # elapsed execution time didn't exceed MAUMAXTIME (sec)
MAUMAXTIME              # maxtime allowed for one mauve test suite to run (sec);
                        # if this maxtime is exceeded the mauve tests are killed
                        # and it is assumed that the mauve tests were blocking.
                        # remark that this parameter is platform dependent

If no config file is specified, these variables are set to default values
by 'headtest'.
Currently, the default value for VTEMAXTIME is 1440 min (24 h).
Before, this value was '0' meaning that the vtetests should run eternally.
Thats why headtest starts prompting for a PASS or FAIL immediately after the
vte tests are started in background. With the current default of 24h for
VTEMAXTIME, it would be better that headtest only prompts for PASS or FAIL
after the vte tests stopped automatically. Some intelligent tests should
be added as well to verify automatically that the tests PASS or FAIL.



newrelease
----------
Creates the specified release-test directory with neccessary sub-directories
for a new release. If not exectued before you start making different
builds for a release in a particular directory, then the first time
you execute mkbuild, it will ask you to create directory 'test-log'.
Just answer with 'y'. Other scripts will create other subdirectories
aswell, if they don't exist yet.
A release tree normall looks like this:

 release-dir (e.g 0-9-5)
  |
  |-  open-wonka
  |-  report
  |-  test-log
  |-  product
  |-  javadoc
  |-  build1
  |...
  |-  buildN
  |-  refmauve.fail
  |-  refmauve.fail2
  |-  reltest.cfg

mkbuild
-------
- Optionally checks out cvs wonka sources and places them in a new diretory
'open-wonka' in the current directory.
- For each build requested, creates a directory "build<n>", where n identifies
build 1 through 32, in the current directory. See 'mkbuild -h' for a list of
possible builds.
- For each build requested, makes a wonka build and a oswaldtests build, using
jam, in directory 'open-wonka'; then moves the build-<CPU>-linux directory
to the corresponding build<n> directory; the wonka excutable, oswaldtests
executable and fsroot directory are moved up in the directory tree and placed
directly under the build<n> parent, at the same level as the build-<CPU>-linux
directory
- non-debug wonka versions for x86 and all wonka versions for arm
are stripped (allthough one could aswell strip debug versions for x86, see REMARK).
- several log files are created in each of the build<n> directories
and summary logfiles BUILD.log and BUILDOT.log are created in the current
directory.

REMARK: because directories are moved after a build is finished, the gnu debugger
can not find wonka sources anymore. If you need to debug wonka, than you must
make a build in the open-wonka directory using 'jam install' (the normal procedure).
If you would like to build for debug on arm, you have to create the
identical path on your arm device, and copy wonka sources beside build
tree to the corresponding location.

otest
-----
executes oswald tests for the specified builds for a specified number
of seconds.
summary info can be found in files build<n>/BUILD<n>-OSWALD.log

mtest
------
Executes mauve tests for the specified build(s) n. The number of times
the complete mauve suite is repaeted can be specified using option -n.
Default is 1. For each cycle i, a results file 'results.i' is created
in directory 'build<n>/fsroot/'. If the number of repetitions is 1, the
results file is just 'results' (should preferably be changed to 'results.1').
Summary info can be found in files build<n>/BUILD<n>-MAUVE.log

refmauve.fail
-------------
file containing list of expected failures of mauve tests. Used by mtest
in evaluating the result of the first execution of the mauve tests suite.

refmauve.fail2
--------------
file containing list of expected failures of mauve tests. Used by mtest
in evaluating the result of the second and subsequent executions of
the mauve tests suite.

vtest
-----
executes vte stress tests for the specified builds
the result can be found in the different result files 'build<n>/fsroot/vte.log'
summary info can be found in files build<n>/BUILD<n>-VTE.log

This script is currently not used and is outdated. It should work similar
to mtest. Condition is that vte tests should run a limited period (e.g. 24h)
and not eternally.

mauveplot
---------
This script takes one or more mauve result files as input;
from each input file it extracts the memory usage figures
on the lines containing the message string 'MEMORY STATUS';
it then plots the memory usage graph for each input file
in a single png image which is written to file mauveplot.png

Requires 'gnuplot' to be installed on your system.


vteplot
-------
This script takes one or more vte.log files as input;
from each input file it extracts the memory usage figures
on the lines containing the message string 'memory: ';
it then plots the memory usage graph for each input file
in a single png image which is written to file vteplot.png

Requires 'gnuplot' to be installed on your system.


savelog
-------
lets you save different log files to sub-directories of sub directory test-log,
provided you created these subdirectories with the 'newrelease' script
(outdated)

sendmail
--------
mails a specified file to 'wonka@acunia.com' using linux' commandline
mail utility

backuprel
---------
lets you make a backup of the directory tree of the current dir to the
open-wonka-release backup directory on server 'librarian', provided that the
current dir contains a subdirectory 'test-log' or 'product' or 'build1'. The
'build<n>' and 'open-wonka' subdirectories are not copied
(not finished)

cplib
-----
copies the specied file or directrory tree to the specified subdirectory of
the open-wonka-release backup directory on server 'librarian'

mkprod
------
- cvs-exports wonka sources for specified cvs revision.
- makes a tar.gz file of the open-wonka source tree, which represents
the source product of this release.
- makes tar.gz files of build of a static binary product for x86 cpu and a
static binary product for arm cpu.

mkrpm
-----
This script creates a wonka rpm product file in directory
/usr/src/redhat/RPMS/i386/, and installs it in '/usr/local'.
You must be root to run this script.
The rmp file contains installations of a wonka debug and a wonka
non-debug.
In contrast to mkprod and mkdoc it does not start with a cvs-export.
It assumes an open-wonka directory already exists. The reason for this
is that you, as a normal user, would not be able to remove or overwrite
files in the exported open-wonka directory.

rpm_inlcude
-----------
similar to j_include.
Defines functions only used by mkrpm. Assumes RTTOOL is defined.

mkdoc
-----
- cvs-exports wonka sources for specified cvs revision
- builds wonka with -sDEBUG=false as non-default setting,
- runs mauve tests with this wonka
- builds doclet.jar
- runs wonkadoc script on the result of the mauvetests and on the java sources
resulting in a set of html doc files in a sub-directory 'javadoc' of the
specified target directory
- creates a tar.gz file of these doc files in the target directory.

mvtag
-----
updates given file(s) from cvs repository in the local directory and moves
the specified tag in cvs repository for these files;

vte
----
script to execute one particular visual test
only the name of the package needs to be specified as a commandline argument.
(not the path com.acunia.wonka.test.awt)
If two commandline arguments are specified the first is asumed to be a wonka
option (starting with - )

jvte
----
same as 'vte'
no wonka options can be specified.

wwatch
------
script running forever and showing (using ps) state of 'wonka' processes
every 20 seconds

mtest2
------
work in progress
(not finished, outdated)

ww
--
work in progress
(not finished, outdated)

vtestnew
--------
work in progress
(not finished, outdated)

int2uni
-------
coverts a file of 4 digit decimal integers to unicode string which are
send to standard output.

rctest
------
Test for race conditions

This script tests after $sleeptime seconds whether
wonka, running vte, successfully started.
if it did, it is stopped and a new wonka is started.
if it did not, the script is stopped with an exit value different from 0.
make sure no $PWD/wonka's are running





Suggestions for further improvement
-----------------------------------
- remake vtest (analogous to mtest) and adapt headtest to use it.
  add intelligent log file checks for automating PASS or FAIL of the tests. 
- extend the use of the config file
- add more tests to verify that needed tools exist before the scripts
  start doing their jobs (eliminate wasted time when a script stops after
  one hour). e.g jikes, ps, pidof, grep, sed, ...
