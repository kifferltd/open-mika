This readme file describes the format and contents of the wonka
fonts.dir file and the font.properties files, which have to be
located in the <wonka-top>/fsroot/system/font/ directory of the
wonka runtime system.

1. fonts.dir file
==================
The fonts.dir file provides a mapping between logical font descriptors
and physical font file names.
This file lists all of the valid xlfd strings for the fonts contained
in the directory <wonka root>/fsroot/system/font.

The format of this file must obey the following rules:

The first data line (first non-comment, non-blank, non linefeed line)
must contain no other but decimal digits forming an integer number
that specifies the number of mappings that follow.
Exactly that number of mappings must follow after the first data line.
Each mapping definition consists of a file name and an xlfd string,
separated by one or more white spaces.
A definition may span several lines, in which case all but the last line
must end with the continuation character '\'
No other data (or comments) are allowed in the definition lines

Blank lines are allowed

You may start a line with a comment character ('#') in which case all
subsequent characters until the next line feed are ignored. If you use
it to comment out a mapping, make sure to subtract 1 from the number on
the first line.
Comments with continuation lines are not allowed.

Since Wonka only supports fixed size fonts, no scalable or ttf fonts,
pixel size, point size, x-resolution, y-resolution and average width in the
xlfd strings must natch the characteristics of the corresponding font
in the font file exactly.

Only unicode fonts are supported. Files must be in pcf format with
extension '.pcf', and may not be in compressed form (no .gz or .Z
extensions)

File names in the font.properties file are case-sensitive.
Logical font descriptor names are case-insensitive.
The last character of the fonts.dir file must be a newline character.

On linux systems you can use the "mkfontdir" utility to generate
the fonts.dir file automatically. Move to the directory of the wonka
runtime system where the wonka fonts are located
(<wonka-top>/fsroot/system/font/). Execute the command:

	/usr/X11R6/bin/mkfontdir ./

which will generate the "fonts.dir" file for the pcf fonts in the
local directory.


example file:

----------------------------------------------------------
9
courR10.pcf -adobe-courier-plain-o-normal--10-100-75-75-m-60-iso10646-1
courB10.pcf -adobe-courier-bold-o-normal--10-100-75-75-m-60-iso10646-1
courI10.pcf -adobe-courier-italic-o-normal--10-100-75-75-m-60-iso10646-1
courR12.pcf -adobe-courier-plain-o-normal--12-120-75-75-m-60-iso10646-1
courB12.pcf -adobe-courier-bold-o-normal--12-120-75-75-m-60-iso10646-1
courI12.pcf -adobe-courier-italic-o-normal--12-120-75-75-m-60-iso10646-1
courR14.pcf -adobe-courier-plain-o-normal--14-120-75-75-m-60-iso10646-1
courB14.pcf -adobe-courier-bold-o-normal--14-120-75-75-m-60-iso10646-1
courI14.pcf -adobe-courier-italic-o-normal--14-120-75-75-m-60-iso10646-1

----------------------------------------------------------


2.font.properties file
======================

The font.properties file provides a mapping between the virtual wonka font
names

Serif
Sans-serif
Monospaced
Dialog
DialogInput

and the logical font descriptors found in the fonts.dir file.

For each logical font name a mapping must be provided for following
font styles:

plain
bold
italic
bolditalic

In general, there are entries in the font properties file that specify the
fonts you want to use. These entries have the following format:

   <virtual font name>.<style>.<index number> = <platform font name>

The virtual font name is the name of the font as recognized by the Wonka
Runtime. For example, Dialog and Serif are Java font names. The platform
font name is the actual name of the font on your platform. On X11 platforms
these names are specified by an xlfd string containing fontnames like 'Times'
and 'Helvetica'.
The index number specifies the order of searching for matching font glyphs,
with zero the highest priority.
Wonka does not support multiple indexes for a single virtual font.
You only have to specify the first index (index 0) for each virtual font.
As a consequence Wonka does not support exclusion ranges either.

Currently Wonka does not support WIN32 style virtual font definitions with
*_CHARSET and NEED_CONVERTED attributes
Wonka only supports X11 font specifications with xlfd strings

All fonts have to be unicode fonts.
Wonka does not support font convertors (unicode index to non-unicode index)
Consequently, wonka does not support 'fontcharset' entries

Since wonka's awt package only uses its own fonts, no X font set properties
need to be provided (and are not supported).

Since missing glyph character definitions are deprecated in jdk 1.4,
wonka does not support them (definitions like "default.char=274f").

The minimum content for a font.properties file is as follows:

Serif.plain.0=<xlfd string>
Serif.bold.0=<xlfd string>
Serif.italic.0=<xlfd string>
Serif.bolditalic.0=<xlfd string>
SansSerif.plain.0=<xlfd string>
SansSerif.bold.0=<xlfd string>
SansSerif.italic.0=<xlfd string>
SansSerif.bolditalic.0=<xlfd string>
Monospaced.plain.0=<xlfd string>
Monospaced.bold.0=<xlfd string>
Monospaced.italic.0=<xlfd string>
Monospaced.bolditalic.0=<xlfd string>
Dialog.plain.0=<xlfd string>
Dialog.bold.0=<xlfd string>
Dialog.italic.0=<xlfd string>
Dialog.bolditalic.0=<xlfd string>
DialogInput.plain.0=<xlfd string>
DialogInput.bold.0=<xlfd string>
DialogInput.italic.0=<xlfd string>
DialogInput.bolditalic.0=<xlfd string>

Wonka only supports fixed size fonts, no ttf fonts. Consequently,
pixel size, point size, x-resolution, y-resolution and average width
in the xlfd strings in the fonts.dir file must be specified.
The fonts.dir file will thus in general contain several mappings for one font,
but for different pixel sizes and point sizes and possibly resolutions.

As in the example above, the fonts.dir may for instance contain nine entries
for the courier font. If the virtual Monospaced font would be defined as
courier, than the font.properties file could contain the following
definitions for that virtual font:

Monospaced.plain.0=-adobe-courier-plain-o-normal--*-%d-*-*-m-*-iso10646-1
Monospaced.bold.0=-adobe-courier-bold-o-normal--*-%d-*-*-m-*-iso10646-1
Monospaced.italic.0=-adobe-courier-italic-o-normal--*-%d-*-*-m-*-iso10646-1
Monospaced.bolditalic.0=-adobe-courier-bold-o-normal--*-%d-*-*-m-*-iso10646-1

To construct the correct xlfd string in the font.properties file, start from a
corresponding xlfd string in the fonts.dir file, e.g.

  -adobe-courier-plain-o-normal--12-120-75-75-m-60-iso10646-1

When copying this xlfd string into a font.properties entry, replace the point
size (the second numerical value) with a "%d" which is later replaced with a
specific point size when the font is used. Also, replace the other values
with "*" (asterisk) to indicate that any value may match this field.
When the font is actually used, the point size specified when the Java
"Font" object is created is used (the "%d" is replaced with this value), and
the font file corresponding to that size is used.

The font.properties file can also include aliases, such as:

alias.MyButtonFont=serif
alias.MyLabelFont=sansserif

NOTE: do not alias existing font names to a virtual font. Do not use names
"Times", "Helvetica", for serif, sansserif, respectively, etc.

The format of the font.properties file must obey the same rules as the
fonts.dir file, with these differences:

- All names in the font.properties file are case-insensitive.
- The virtual font name and the xlfd string in a mapping must be separated
  by a '=' character. White spaces before and after that character are
  allowed.
