###########################################################################
# Copyright (c) 2001, 2002, 2003 by Acunia N.V. All rights reserved.      #
#                                                                         #
# This software is copyrighted by and is the sole property of Acunia N.V. #
# and its licensors, if any. All rights, title, ownership, or other       #
# interests in the software remain the property of Acunia N.V. and its    #
# licensors, if any.                                                      #
#                                                                         #
# This software may only be used in accordance with the corresponding     #
# license agreement. Any unauthorized use, duplication, transmission,     #
#  distribution or disclosure of this software is expressly forbidden.    #
#                                                                         #
# This Copyright notice may not be removed or modified without prior      #
# written consent of Acunia N.V.                                          #
#                                                                         #
# Acunia N.V. reserves the right to modify this software without notice.  #
#                                                                         #
#   Acunia N.V.                                                           #
#   Philips-site 5, bus 3       info@acunia.com                           #
#   3001 Leuven                 http://www.acunia.com                     #
#   Belgium - EUROPE                                                      #
###########################################################################

# 
# $Id: uart-classes.in,v 1.1 2005/04/28 13:15:22 cvs Exp $
# 
# This file is used to generate uart-classes.h and uart-classes.c.  
# It contains two types of record:
#
# 1. A single field which is a fully-qualified class name, e.g.
#   java/lang/Object
# There must be no whitespace preceding the name.
#
# This causes code to be generated for two static strings:
#    string_Object	value "java/lang/Object" and
#    string_ObjectDesc  value "Ljava/lang/Object;"
# and for w_clazz clazzObject, initialized by resolving java/lang/Object.
# It also sets the context for the type-2 records which follow.
#
# 2. one or two fields preceded and separated by whitespace 
# (space or tab characters).
#
# 2a.
# 	<field>       <descr>
#
# (where <descr> is a field descriptor) causes an int F_<class>_<field> 
# to be declared and set to the offset of the slot for <field> within an 
# instance of <class>. The <class> is a not fully qualified name like e.g.
# 'Object' or 'StringBuffer'.
#
# 2b.
# 	<field>       +
#
# causes an int F_<class>_<field> to be declared and set equal to the current
# instanceSize, which is then incremented.  The "fictitious" field(s) so
# created follow all "real" fields in the instance structure.
# 
# N.B. The "+"-type fields of Class, Array, Object and String are included 
# in this file for documentation purposes only: the corresponding values are 
# initialized "by hand" in array.c and clazz.c.
#
# 2c.    
# 	<method name> <method descriptor>     <entry point>
#
# causes the function <entrypoint> to be registered as the implementation
# of <class>.<method name> <method descriptor>.
#
# What needs to be in here?
#
# A class should be included in the file if the clazz_... or string_...
# declarations are needed, or if it is essential that the class be loaded
# before Init.run() is executed; this includes all those subclasses of 
# Throwable for which a WS_... constant needs to be defined.  A class
# must also be included if any of its fields or methods are to be included:
# native methods and "fictitious" fields obviously need to be included, but
# other methods and fields need only be present if the F_... declaration
# is needed.
#

javax/comm/SerialPortEvent
	oldvalue	I
	newvalue	I
	eventtype	I
javax/comm/NoSuchPortException
javax/comm/PortInUseException
com/acunia/device/uart/UARTInputStream
	wotsit		+
	open		Z
	createFromString (Ljava/lang/String;)V	UARTInputStream_createFromString
	readIntoBuffer	([BII)I			UARTInputStream_readIntoBuffer
	skip0		(J)J			UARTInputStream_skip0
	close0		()V			UARTInputStream_close0
	available	()I			UARTInputStream_available
com/acunia/device/uart/UARTOutputStream
	wotsit		+
	open		Z
	createFromString (Ljava/lang/String;)V	UARTOutputStream_createFromString
	close0		()V			UARTOutputStream_close0
	write		(I)V			UARTOutputStream_write
	writeFromBuffer	([BII)V			UARTOutputStream_writeFromBuffer
	flush		()V			UARTOutputStream_flush
com/acunia/device/uart/UARTControlStream
        wotsit		+
	createFromString (Ljava/lang/String;)V	UARTControlStream_createFromString
        close		()V			UARTControlStream_close
	getbaudrate   	()I			UARTControlStream_getbaudrate   
	setbaudrate   	(I)I			UARTControlStream_setbaudrate   
	getdatabits   	()I			UARTControlStream_getdatabits   
	setdatabits   	(I)I			UARTControlStream_setdatabits   
	getstopbits   	()I			UARTControlStream_getstopbits   
	setstopbits   	(I)I			UARTControlStream_setstopbits   
	getparity   	()I			UARTControlStream_getparity   
	setparity   	(I)I			UARTControlStream_setparity   
	getflowcontrol 	()I			UARTControlStream_getflowcontrol   
	setflowcontrol 	(I)I			UARTControlStream_setflowcontrol   
	getdsr   	()Z			UARTControlStream_getdsr   
	getcd   	()Z			UARTControlStream_getcd   
	getcts   	()Z			UARTControlStream_getcts   
	getri   	()Z			UARTControlStream_getri   
	setdtr   	(Z)Z			UARTControlStream_setdtr   
	setrts   	(Z)Z			UARTControlStream_setrts   
	sendbreak	(I)V			UARTControlStream_sendbreak
        waitforevent	(Ljavax/comm/SerialPortEvent;)V UARTControlStream_waitforevent
#com/acunia/device/uart/UART
com/acunia/device/uart/UARTDriver
	firstUARTname	()Ljava/lang/String;	UARTDriver_static_firstUARTname
	nextUARTname	()Ljava/lang/String;	UARTDriver_static_nextUARTname
	registerSerialDevice0 (Ljava/lang/String;Ljava/lang/String;I)V UARTDriver_static_registerSerialDevice0
	attachSerialDevice0 (Ljava/lang/String;ILjava/lang/String;)V UARTDriver_static_attachSerialDevice0

