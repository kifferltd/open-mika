#!/bin/bash

###########################################################################
# Copyright (c) 2001 by Punch Telematix. All rights reserved.             #
#                                                                         #
# Redistribution and use in source and binary forms, with or without      #
# modification, are permitted provided that the following conditions      #
# are met:                                                                #
# 1. Redistributions of source code must retain the above copyright       #
#    notice, this list of conditions and the following disclaimer.        #
# 2. Redistributions in binary form must reproduce the above copyright    #
#    notice, this list of conditions and the following disclaimer in the  #
#    documentation and/or other materials provided with the distribution. #
# 3. Neither the name of Punch Telematix nor the names of other           #
#    contributors may be used to endorse or promote products derived      #
#    from this software without specific prior written permission.        #
#                                                                         #
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED          #
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    #
# IN NO EVENT SHALL PUNCH TELEMATIX OR OTHER CONTRIBUTORS BE LIABLE       #
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR            #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR         #
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   #
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    #
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  #
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           #
###########################################################################

# -----------------------------------------------------------------------------
build=
let maxtime=300
let sleeptime=30
unknownoption=


# -----------------------------------------------------------------------------

function showHelp() {
  echo " usage: $0 [-x] [ --help | -h ] [-m maxtime] [-s sleeptime] [<build nbr > ...] ] [all] "
  echo "    -x must be first parameter; sets verbose mode"
  echo "    --help and -h generate this help text"
  echo "    -m maxtime : sets the maximum elapsed time the mauve tests are expected"
  echo "      to run for one build; default is $maxtime seconds "
  echo "    -s sleeptime : sets the time interval between checks testing if oswaldtests "
  echo "      for a build are still running; default is $sleeptime seconds"
  echo "    subsequent parameters are a list of build numbers, or the keyword 'all' "
  echo "    keyword 'all' or no build numbers indicate all builds are to be processed"
  echo ""
  echo " Execute from within the main directory of a particular release version. "
  echo " Executes oswaldtests for the specified build(s); checks that the tests "
  echo " don't deadlock, kills the tests after $maxtime seconds "
  echo " A success or failure message is written a log file build<nbr>/BUILD<nbr>-OSWALD.log"
}

# -----------------------------------------------------------------------------

function getArgs() {

  if [ $1 ] && [ $1 = "-x" ]; then
    shift
    set -x
  fi

  while [ $# -gt 0 ]; do
    case $1 in
      --help | -h )
         showHelp
         set -
         exit
         ;;
      -m )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let maxtime=0
           echo "missing value for -m (maxtime) option"
         else
           let maxtime=$2
           shift
         fi
         ;;
      -s )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let sleeptime=0
           echo "missing value for -s (sleeptime) option"
         else
           let sleeptime=$2
           shift
         fi
         ;;
      1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 )
         if [ -z $build ]; then
           build=$1
         else
           build=$build" "$1
         fi
         ;;
      all )
         build="1 2 3 4 5 6 7 8 9 10"
         ;;
      * )
         echo "$1 : unknown option"
         unknownoption=error
         ;;
    esac
    shift
  done

  if [ $maxtime -eq 0 ] || [ $sleeptime -eq 0 ] || [ $unknownoption ]; then
    echo "$0 aborted: parameter errors; try option --help"
    set -
    exit
  fi

  if [ -z $build ]; then
    build="1 2 3 4 5 6 7 8 9 10"
  fi
}

# MAIN ------------------------------------------------------------------------

getArgs $*

for b in $build ; do

  BUILDDIR=build$b
  LOGFILE=BUILD${b}-VTE.log

  if [ -f ${BUILDDIR}/wonka ]; then
    cd  ${BUILDDIR}

    ./wonka  &> /dev/null  &
    wonkapid=$(pidof -s ../$BUILDDIR/wonka)
    if [ $? -ne 0 ]; then
      echo "Aborting ..."
      exit
    fi

    if [ -z $wonkapid ]; then
      echo "VTE TESTS BUILD$b : can't execute"
      echo "VTE TESTS BUILD$b : can't execute  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
    else
      if [ -f fsroot/user/vte.properties ]; then
        sleeptime=$[$(grep -esleepTime build2/fsroot/user/vte.properties | cut -d=  -f2)/100]
        sleeptime=$[$(grep -esleepTime build2/fsroot/user/vte.properties | cut -d=  -f2)]

      let cputime1=-1
      cputime2=$(ps h --format time -p ${wonkapid} | cut -c1,2,4,5,7,8)
 #      ps -o pid,state,time,etime -C wonka r h  : show  pid  state (D   uninterruptible sleep (usually IO),
#                                                                     R   runnable (on run queue),
#                                                                     S   sleeping
#                                                                     T   traced or stopped
#                                                                     Z   a defunct ("zombie") process )
# cputime, elapsed time, for all processes named 'wonka' en that are runnable (makes 'state' redundant) and witout header.


      let s=0
      while [ $cputime1 -lt $cputime2 ] && [ $s -lt $maxtime ] ; do
        sleep $sleeptime
        let s=$s+$sleeptime
        cputime1=$cputime2
        cputime2=$(ps h --format time -p ${wonkapid} | cut -c1,2,4,5,7,8)
        cputime2=${cputime2:=0}
      done
      if [ $cputime2 -gt 0 ]
        kill -9 $wonkapid
        if [ ! $cputime1 -eq $cputime2 ]; then
          echo "VTE TESTS BUILD$b FAILED: vte was blocked"
          echo "VTE TESTS BUILD$b FAILED: vte was blocked  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
        else
          echo "VTE TESTS BUILD$b PASSED (forced stop)"
          echo "VTE TESTS BUILD$b PASSED (forced stop) $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
        fi
      else
        if [ $[maxtime - cputime1] -le $sleeptime ]
          echo "VTE TESTS BUILD$b PASSED"
          echo "VTE TESTS BUILD$b PASSED  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
        else
          echo "VTE TESTS BUILD$b FAILED : premature end"
          echo "VTE TESTS BUILD$b FAILED : premature end $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
        fi
      fi

    fi

    cd ..
  else
    echo "file ${BUILDDIR}/wonka not found"
    echo "file ${BUILDDIR}/wonka not found  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
  fi

done

# END MAIN ---------------------------------------------------------------------

set -
exit
