/**************************************************************************
* Copyright  (c) 2001 by Acunia N.V. All rights reserved.                 *
*                                                                         *
* This software is copyrighted by and is the sole property of Acunia N.V. *
* and its licensors, if any. All rights, title, ownership, or other       *
* interests in the software remain the property of Acunia N.V. and its    *
* licensors, if any.                                                      *
*                                                                         *
* This software may only be used in accordance with the corresponding     *
* license agreement. Any unauthorized use, duplication, transmission,     *
*  distribution or disclosure of this software is expressly forbidden.    *
*                                                                         *
* This Copyright notice may not be removed or modified without prior      *
* written consent of Acunia N.V.                                          *
*                                                                         *
* Acunia N.V. reserves the right to modify this software without notice.  *
*                                                                         *
*   Acunia N.V.                                                           *
*   Vanden Tymplestraat 35      info@acunia.com                           *
*   3000 Leuven                 http://www.acunia.com                     *
*   Belgium - EUROPE                                                      *
**************************************************************************/


package gnu.testlet.wonka.io.Serialization;

import java.io.*;
import java.util.Hashtable;
import java.lang.reflect.Method;

public class READ_File {

  private static Hashtable streamtable;

  private void reset() {
  }

  public ObjectInputStream open (String filename) {
  	ObjectInputStream ois = (ObjectInputStream) streamtable.get(filename);
  	System.out.println("READ_File is returning :"+ois+" asked for "+filename);
  	
    return ois;
  }

  public void close() {

  }

  public READ_File (){
       streamtable=new Hashtable();
       try {
       streamtable.put("DUMPdata1" , 	  new ObjectInputStream(new ByteArrayInputStream(DATABLOCK1)));
       streamtable.put("DUMPdata2" , 	  new ObjectInputStream(new ByteArrayInputStream(DATABLOCK2)));
       streamtable.put("DUMPSimple",	  new ObjectInputStream(new ByteArrayInputStream(Simple)));
       streamtable.put("DUMPString",	  new ObjectInputStream(new ByteArrayInputStream(ClassString)));
       streamtable.put("DUMPStringBuffer",new ObjectInputStream(new ByteArrayInputStream(StringBuffer)));
       streamtable.put("DUMPArray", 	  new ObjectInputStream(new ByteArrayInputStream(ClassArray)));
       streamtable.put("DUMPVector",	  new ObjectInputStream(new ByteArrayInputStream(Vector)));
       streamtable.put("DUMPSubclass",    new ObjectInputStream(new ByteArrayInputStream(ClassSubClass)));
       streamtable.put("DUMPUnderscore",  new ObjectInputStream(new ByteArrayInputStream(SM_ClassUnderscore)));
       streamtable.put("DUMPOuterClass",  new ObjectInputStream(new ByteArrayInputStream(SAMPLE_SimpleOuterClass)));
       streamtable.put("DUMPBlockdatalong", new ObjectInputStream(new ByteArrayInputStream(BLOCKDATALONG)));
       streamtable.put("DUMP_SBA",        new ObjectInputStream(new ByteArrayInputStream(StringBufferArray)));
       streamtable.put("DUMP_CreateByteArray", new ObjectInputStream(new ByteArrayInputStream(CreateByteArray)));

       }
       catch(IOException ieo) { System.out.println("Something has gone wrong ???"); ieo.printStackTrace();}
  }

  public static byte [] DATABLOCK1 = { //--> Length of array: 22
-84, -19, 0, 5, 119, 16, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0,
0, 0, 0, 16, 0, 5 };



  public static byte [] DATABLOCK2 = { //--> Length of array: 18
-84, -19, 0, 5, 119, 12, 63, -16, 0, 0, 0, 0, 0, 0, -65, -128,
0, 0 };



  public static byte [] Simple = { //--> Length of array: 155
-84, -19, 0, 5, 115, 114, 0, 44, 103, 110, 117, 46, 116, 101, 115, 116,
108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111, 46, 83, 101, 114,
105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 83, 77, 95, 83, 105,
109, 112, 108, 101, -62, -46, -55, -3, -120, -118, 103, 10, 2, 0, 7, 68,
0, 7, 97, 68, 111, 117, 98, 108, 101, 70, 0, 6, 97, 70, 108, 111,
97, 116, 74, 0, 5, 97, 76, 111, 110, 103, 73, 0, 5, 97, 110, 73,
110, 116, 90, 0, 2, 98, 49, 90, 0, 2, 98, 50, 73, 0, 12, 115,
111, 109, 101, 79, 116, 104, 101, 114, 73, 110, 116, 120, 112, 64, 9, 33,
-5, 83, -56, -44, -15, 65, -123, 71, -82, 0, 0, 0, 0, 0, 0, 0,
7, 0, 0, 2, -102, 1, 0, 0, 0, 0, 10 };



  public static byte [] ClassString = { //--> Length of array: 159
-84, -19, 0, 5, 115, 114, 0, 49, 103, 110, 117, 46, 116, 101, 115, 116,
108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111, 46, 83, 101, 114,
105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 83, 77, 95, 67, 108,
97, 115, 115, 83, 116, 114, 105, 110, 103, -119, 73, -50, 121, -121, -37, -74,
-72, 2, 0, 3, 76, 0, 7, 97, 83, 116, 114, 105, 110, 103, 116, 0,
18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105,
110, 103, 59, 76, 0, 11, 111, 116, 104, 101, 114, 83, 116, 114, 105, 110,
103, 113, 0, 126, 0, 1, 76, 0, 10, 115, 97, 109, 101, 83, 116, 114,
105, 110, 103, 113, 0, 126, 0, 1, 120, 112, 116, 0, 12, 72, 101, 108,
108, 111, 32, 119, 111, 114, 108, 100, 46, 112, 113, 0, 126, 0, 3 };



  public static byte [] ClassArray = { //--> Length of array: 500
-84, -19, 0, 5, 115, 114, 0, 48, 103, 110, 117, 46, 116, 101, 115, 116,
108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111, 46, 83, 101, 114,
105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 83, 77, 95, 67, 108,
97, 115, 115, 65, 114, 114, 97, 121, -51, 81, 76, -82, 38, -51, 84, 31,
2, 0, 6, 91, 0, 9, 98, 121, 116, 101, 65, 114, 114, 97, 121, 116,
0, 2, 91, 66, 91, 0, 11, 100, 111, 117, 98, 108, 101, 65, 114, 114,
97, 121, 116, 0, 2, 91, 68, 91, 0, 8, 105, 110, 116, 65, 114, 114,
97, 121, 116, 0, 2, 91, 73, 91, 0, 9, 105, 110, 116, 65, 114, 114,
97, 121, 50, 113, 0, 126, 0, 3, 91, 0, 9, 105, 110, 116, 65, 114,
114, 97, 121, 51, 116, 0, 3, 91, 91, 73, 91, 0, 11, 111, 98, 106,
101, 99, 116, 65, 114, 114, 97, 121, 116, 0, 19, 91, 76, 106, 97, 118,
97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 120, 112,
117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0,
0, 120, 112, 0, 0, 0, 2, -84, -19, 117, 114, 0, 2, 91, 68, 62,
-90, -116, 20, -85, 99, 90, 30, 2, 0, 0, 120, 112, 0, 0, 0, 3,
63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-64, -113, 56, 0, 0, 0, 0, 0, 112, 117, 114, 0, 2, 91, 73, 77,
-70, 96, 38, 118, -22, -78, -91, 2, 0, 0, 120, 112, 0, 0, 0, 3,
0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 117, 114, 0, 3,
91, 91, 73, 23, -9, -28, 79, 25, -113, -119, 60, 2, 0, 0, 120, 112,
0, 0, 0, 2, 117, 113, 0, 126, 0, 11, 0, 0, 0, 3, 0, 0,
0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 117, 113, 0, 126, 0, 11,
0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 15,
117, 114, 0, 19, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46,
79, 98, 106, 101, 99, 116, 59, -112, -50, 88, -97, 16, 115, 41, 108, 2,
0, 0, 120, 112, 0, 0, 0, 2, 115, 114, 0, 17, 106, 97, 118, 97,
46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96,
-92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101,
120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117,
109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120,
112, 0, 0, 2, -102, 116, 0, 12, 72, 101, 108, 108, 111, 32, 119, 111,
114, 108, 100, 46 };



  public static byte [] Vector = { //--> Length of array: 255
-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 117, 116, 105,
108, 46, 86, 101, 99, 116, 111, 114, -39, -105, 125, 91, -128, 59, -81, 1,
2, 0, 3, 73, 0, 17, 99, 97, 112, 97, 99, 105, 116, 121, 73, 110,
99, 114, 101, 109, 101, 110, 116, 73, 0, 12, 101, 108, 101, 109, 101, 110,
116, 67, 111, 117, 110, 116, 91, 0, 11, 101, 108, 101, 109, 101, 110, 116,
68, 97, 116, 97, 116, 0, 19, 91, 76, 106, 97, 118, 97, 47, 108, 97,
110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 120, 112, 0, 0, 0, 0,
0, 0, 0, 2, 117, 114, 0, 19, 91, 76, 106, 97, 118, 97, 46, 108,
97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 59, -112, -50, 88, -97, 16,
115, 41, 108, 2, 0, 0, 120, 112, 0, 0, 0, 10, 116, 0, 11, 72,
101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 115, 114, 0, 17, 106, 97,
118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18,
-30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108,
117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46,
78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0,
0, 120, 112, 0, 0, 2, -102, 112, 112, 112, 112, 112, 112, 112, 112 };



  public static byte [] StringBuffer = { //--> Length of array: 143
-84, -19, 0, 5, 115, 114, 0, 22, 106, 97, 118, 97, 46, 108, 97, 110,
103, 46, 83, 116, 114, 105, 110, 103, 66, 117, 102, 102, 101, 114, 47, 7,
7, -39, -22, -56, -22, -45, 2, 0, 3, 73, 0, 5, 99, 111, 117, 110,
116, 90, 0, 6, 115, 104, 97, 114, 101, 100, 91, 0, 5, 118, 97, 108,
117, 101, 116, 0, 2, 91, 67, 120, 112, 0, 0, 0, 5, 0, 117, 114,
0, 2, 91, 67, -80, 38, 102, -80, -30, 93, -124, -84, 2, 0, 0, 120,
112, 0, 0, 0, 21, 0, 72, 0, 101, 0, 108, 0, 108, 0, 111, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };



  public static byte [] ClassSubClass = { //--> Length of array: 295
-84, -19, 0, 5, 115, 114, 0, 48, 103, 110, 117, 46, 116, 101, 115, 116,
108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111, 46, 83, 101, 114,
105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 67, 108, 97, 115, 115,
83, 117, 98, 99, 108, 97, 115, 115, 4, 124, 27, 20, 69, -116, -25, 89,
2, 0, 3, 90, 0, 5, 98, 111, 111, 108, 49, 90, 0, 5, 98, 111,
111, 108, 50, 91, 0, 16, 105, 110, 116, 65, 114, 114, 97, 121, 83, 117,
98, 99, 108, 97, 115, 115, 116, 0, 2, 91, 73, 120, 114, 0, 44, 103,
110, 117, 46, 116, 101, 115, 116, 108, 101, 116, 46, 119, 111, 110, 107, 97,
46, 105, 111, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111,
110, 46, 83, 77, 95, 83, 105, 109, 112, 108, 101, -62, -46, -55, -3, -120,
-118, 103, 10, 2, 0, 7, 68, 0, 7, 97, 68, 111, 117, 98, 108, 101,
70, 0, 6, 97, 70, 108, 111, 97, 116, 74, 0, 5, 97, 76, 111, 110,
103, 73, 0, 5, 97, 110, 73, 110, 116, 90, 0, 2, 98, 49, 90, 0,
2, 98, 50, 73, 0, 12, 115, 111, 109, 101, 79, 116, 104, 101, 114, 73,
110, 116, 120, 112, 64, 9, 33, -5, 83, -56, -44, -15, 65, -123, 71, -82,
0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 2, -102, 1, 0, 0, 0,
0, 10, 1, 0, 117, 114, 0, 2, 91, 73, 77, -70, 96, 38, 118, -22,
-78, -91, 2, 0, 0, 120, 112, 0, 0, 0, 3, 0, 0, 0, 63, 0,
0, 0, 31, 0, 0, 39, 15 };



  public static byte [] SAMPLE_SimpleOuterClass = { //--> Length of array: 743
-84, -19, 0, 5, 115, 114, 0, 58, 103, 110, 117, 46, 116, 101, 115, 116,
108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111, 46, 83, 101, 114,
105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 83, 65, 77, 80, 76,
69, 95, 83, 105, 109, 112, 108, 101, 79, 117, 116, 101, 114, 67, 108, 97,
115, 115, -101, 82, -44, -35, 48, 75, 93, -99, 2, 0, 3, 73, 0, 8,
111, 117, 116, 101, 114, 73, 110, 116, 76, 0, 10, 111, 116, 104, 101, 114,
73, 110, 110, 101, 114, 116, 0, 76, 76, 103, 110, 117, 47, 116, 101, 115,
116, 108, 101, 116, 47, 119, 111, 110, 107, 97, 47, 105, 111, 47, 83, 101,
114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 47, 83, 65, 77, 80,
76, 69, 95, 83, 105, 109, 112, 108, 101, 79, 117, 116, 101, 114, 67, 108,
97, 115, 115, 36, 79, 116, 104, 101, 114, 73, 110, 110, 101, 114, 67, 108,
97, 115, 115, 59, 76, 0, 11, 112, 117, 98, 108, 105, 99, 73, 110, 110,
101, 114, 116, 0, 77, 76, 103, 110, 117, 47, 116, 101, 115, 116, 108, 101,
116, 47, 119, 111, 110, 107, 97, 47, 105, 111, 47, 83, 101, 114, 105, 97,
108, 105, 122, 97, 116, 105, 111, 110, 47, 83, 65, 77, 80, 76, 69, 95,
83, 105, 109, 112, 108, 101, 79, 117, 116, 101, 114, 67, 108, 97, 115, 115,
36, 80, 117, 98, 108, 105, 99, 73, 110, 110, 101, 114, 67, 108, 97, 115,
115, 59, 120, 112, 0, 0, -54, -2, 115, 114, 0, 74, 103, 110, 117, 46,
116, 101, 115, 116, 108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111,
46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 83,
65, 77, 80, 76, 69, 95, 83, 105, 109, 112, 108, 101, 79, 117, 116, 101,
114, 67, 108, 97, 115, 115, 36, 79, 116, 104, 101, 114, 73, 110, 110, 101,
114, 67, 108, 97, 115, 115, 53, 118, -112, -24, 111, -21, 19, 79, 2, 0,
2, 73, 0, 13, 111, 116, 104, 101, 114, 73, 110, 110, 101, 114, 73, 110,
116, 76, 0, 6, 116, 104, 105, 115, 36, 48, 116, 0, 60, 76, 103, 110,
117, 47, 116, 101, 115, 116, 108, 101, 116, 47, 119, 111, 110, 107, 97, 47,
105, 111, 47, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110,
47, 83, 65, 77, 80, 76, 69, 95, 83, 105, 109, 112, 108, 101, 79, 117,
116, 101, 114, 67, 108, 97, 115, 115, 59, 120, 114, 0, 44, 103, 110, 117,
46, 116, 101, 115, 116, 108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105,
111, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46,
83, 77, 95, 83, 105, 109, 112, 108, 101, -62, -46, -55, -3, -120, -118, 103,
10, 2, 0, 7, 68, 0, 7, 97, 68, 111, 117, 98, 108, 101, 70, 0,
6, 97, 70, 108, 111, 97, 116, 74, 0, 5, 97, 76, 111, 110, 103, 73,
0, 5, 97, 110, 73, 110, 116, 90, 0, 2, 98, 49, 90, 0, 2, 98,
50, 73, 0, 12, 115, 111, 109, 101, 79, 116, 104, 101, 114, 73, 110, 116,
120, 112, 64, 9, 33, -5, 83, -56, -44, -15, 65, -123, 71, -82, 0, 0,
0, 0, 0, 0, 0, 7, 0, 0, 2, -102, 1, 0, 0, 0, 0, 10,
0, 0, 10, -66, 113, 0, 126, 0, 3, 115, 114, 0, 75, 103, 110, 117,
46, 116, 101, 115, 116, 108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105,
111, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46,
83, 65, 77, 80, 76, 69, 95, 83, 105, 109, 112, 108, 101, 79, 117, 116,
101, 114, 67, 108, 97, 115, 115, 36, 80, 117, 98, 108, 105, 99, 73, 110,
110, 101, 114, 67, 108, 97, 115, 115, -5, 121, -27, -17, -62, 99, -61, 101,
2, 0, 2, 73, 0, 8, 105, 110, 110, 101, 114, 73, 110, 116, 76, 0,
6, 116, 104, 105, 115, 36, 48, 113, 0, 126, 0, 5, 120, 112, 0, 0,
-70, -66, 113, 0, 126, 0, 3 };



  public static byte [] SM_ClassUnderscore = { //--> Length of array: 177
-84, -19, 0, 5, 115, 114, 0, 53, 103, 110, 117, 46, 116, 101, 115, 116,
108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111, 46, 83, 101, 114,
105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 83, 77, 95, 67, 108,
97, 115, 115, 85, 110, 100, 101, 114, 115, 99, 111, 114, 101, -104, 38, 89,
104, 15, -36, -85, 5, 2, 0, 3, 73, 0, 6, 95, 104, 101, 108, 108,
111, 91, 0, 11, 95, 115, 111, 109, 101, 95, 116, 101, 115, 116, 95, 116,
0, 2, 91, 90, 76, 0, 6, 95, 119, 111, 114, 108, 100, 116, 0, 18,
76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110,
103, 59, 120, 112, 0, 0, 0, 5, 117, 114, 0, 2, 91, 90, 87, -113,
32, 57, 20, -72, 93, -30, 2, 0, 0, 120, 112, 0, 0, 0, 4, 1,
0, 1, 1, 116, 0, 11, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108,
100 };

  public static byte[] BLOCKDATALONG = { //--> Length of array: 1037
-84, -19, 0, 5, 122, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 2, 119, 2, 3, 4 };

  public static byte[] StringBufferArray = { //--> Length of array: 232
-84, -19, 0, 5, 117, 114, 0, 25, 91, 76, 106, 97, 118, 97, 46, 108,
97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 66, 117, 102, 102, 101, 114,
59, -94, -32, -81, 55, 85, 81, -84, -30, 2, 0, 0, 120, 112, 0, 0,
0, 2, 115, 114, 0, 22, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46,
83, 116, 114, 105, 110, 103, 66, 117, 102, 102, 101, 114, 47, 7, 7, -39,
-22, -56, -22, -45, 2, 0, 3, 73, 0, 5, 99, 111, 117, 110, 116, 90,
0, 6, 115, 104, 97, 114, 101, 100, 91, 0, 5, 118, 97, 108, 117, 101,
116, 0, 2, 91, 67, 120, 112, 0, 0, 0, 0, 0, 117, 114, 0, 2,
91, 67, -80, 38, 102, -80, -30, 93, -124, -84, 2, 0, 0, 120, 112, 0,
0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 115, 113, 0, 126, 0, 2, 0, 0, 0, 0, 0, 117, 113,
0, 126, 0, 5, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0 };

  public static byte[] CreateByteArray = {
-84, -19, 0, 5, 115, 114, 0, 50, 103, 110, 117, 46, 116, 101, 115, 116,
108, 101, 116, 46, 119, 111, 110, 107, 97, 46, 105, 111, 46, 83, 101, 114,
105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 46, 67, 114, 101, 97, 116,
101, 66, 121, 116, 101, 65, 114, 114, 97, 121, 122, -80, 117, 38, 5, -52,
94, -49, 2, 0, 0, 120, 112 };

}





