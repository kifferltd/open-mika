#ifndef _THREADS_H
#define _THREADS_H

/**************************************************************************
* Copyright (c) 2001, 2002, 2003 by Acunia N.V. All rights reserved.      *
*                                                                         *
* This software is copyrighted by and is the sole property of Acunia N.V. *
* and its licensors, if any. All rights, title, ownership, or other       *
* interests in the software remain the property of Acunia N.V. and its    *
* licensors, if any.                                                      *
*                                                                         *
* This software may only be used in accordance with the corresponding     *
* license agreement. Any unauthorized use, duplication, transmission,     *
*  distribution or disclosure of this software is expressly forbidden.    *
*                                                                         *
* This Copyright notice may not be removed or modified without prior      *
* written consent of Acunia N.V.                                          *
*                                                                         *
* Acunia N.V. reserves the right to modify this software without notice.  *
*                                                                         *
*   Acunia N.V.                                                           *
*   Philips site 5, box 3       info@acunia.com                           *
*   3001 Leuven                 http://www.acunia.com                     *
*   Belgium - EUROPE                                                      *
**************************************************************************/

/*
** $Id: threads.h.20040113,v 1.1.1.1 2004/07/12 14:07:45 cvs Exp $
*/

#include "jni.h"
#include "oswald.h"
#include "wonka.h"

/*
** If GC_SAFE_POINTS is defined, the GC "safe points" mechanism will be used.
** See the comment block "GC SAFE POINTS" below for more details.
**
** USE_PETERSONS_ALGORITHM is only meaningful if GC_SAFE_POINTS is defined.
** If USE_PETERSONS_ALGORITHM is defined then Peterson's algorithm is used to
** manage the GC state transitions (safe/unsafe/blocked), otherwise a good ol'
** x_monitor is used.
*/

//#define USE_PETERSONS_ALGORITHM

/*
** For the non-Peterson's case we have a couple of x_monitor_wait()s which
** should really be x_eternal, but we're superstitious : so we only wait
** for 10 ticks before checking the guard again.
*/
#ifndef USE_PETERSONS_ALGORITHM
#define NEARLY_ETERNAL 10
#endif

extern w_size numThreads;
extern w_thread W_Thread_system;
extern w_thread W_Thread_sysInit;
extern w_instance I_Thread_sysInit;
extern w_group W_ThreadGroup_system;
extern w_instance I_ThreadGroup_system;
extern w_method registerThread_method;
extern w_method deregisterThread_method;

void systemGroupManagerEntry(void);

/*
** The interpreter routine uses alloca to allocate space from the stack
** so that it can call itself recursively. When the compiler isn't good
** enough, he will allocate about 512 bytes from the stack for each call
** e.g. gcc 2.95.2 on X86. The same compiler for ARM only requires 44 bytes
** of stack space. Therefore we define a STACK_FACTOR based on processor
** that takes this into account. The average stack use on an X86 with gcc-2.96
** is around 512 bytes; for an ARM with gcc-2.95.2 it is 320 bytes.
**
** For some versions of gcc/libgc you may need a STACK_FACTOR of 4 or more. 8-0
*/

#if defined(ARM)
 #if defined(JSPOT)
  #define STACK_FACTOR                       5
 #else
  #define STACK_FACTOR                       1
 #endif
static const w_int bytes_per_call        = 180;
#elif defined(PPC)
#define STACK_FACTOR                        3
static const w_size bytes_per_call       = 256;
#elif defined(X86)
#define STACK_FACTOR                        5 // WAS: 5
static const w_size bytes_per_call       = 500;
#else
#error "Define STACK_FACTOR"
#endif

#define SYSTEM_GROUP_MANAGER_LOCALS 256
#define SYSTEM_GROUP_MANAGER_STACK_SIZE (8 * 1024 * STACK_FACTOR)

static const w_size default_stack_size   = 1024 * 32 * STACK_FACTOR;
static const w_size default_locals       =  1024;

static const w_size gc_stack_size        = 1024 * 32 * STACK_FACTOR;
static const w_size gc_locals            =  256;

static const w_size init_stack_size      = 1024 * 32 * STACK_FACTOR;
static const w_size init_locals          =  256;

static const w_size group_stack_size     = 1024 * 32 * STACK_FACTOR;
static const w_size manager_locals       =  SYSTEM_GROUP_MANAGER_LOCALS;

static const w_size system_stack_size    = SYSTEM_GROUP_MANAGER_STACK_SIZE;
static const w_size system_locals        =  256;

static const w_size driver_stack_size    = 1024 * 32 * STACK_FACTOR;

#define USER_PRIORITY                       5  // This is a java priority

#define GROUP_MANAGER_BOX_SIZE              256
#define GROUP_MANAGER_PRIORITY              10 // Java priority
/* N.B. The kernel priority is set a notch higher, quasi 10.5 */

#define SYSTEM_GROUP_MANAGER_BOX_SIZE       256
#define SYSTEM_GROUP_MANAGER_PRIORITY       15 // Java priority
/* N.B. The kernel priority is set a notch higher, quasi 15.5 */

#define DEFAULT_BOUNCE_LIMIT                500
#define THREAD_NAME_BUFFER_SIZE             64

/*
** Map a Java priority to a kernel thread priority.
** Parameter jp is the Java priority, and the sign of parameter trim
** is used to set priorities ``just above'' or ``just below'' jp
** (in the Java sense of ``above/below'').
*/

#define REVERSE_PRIORITY
#ifdef  REVERSE_PRIORITY
#define _j2k(jp) (NUM_PRIORITIES*(16-(jp))/16)
#else
#define _j2k(jp) (NUM_PRIORITIES*((jp))/16)
#endif
#define OLDpriority_j2k(jp,trim) (((jp)<1 ? _j2k(1) : (jp)>15 ? _j2k(15) : _j2k(jp)) + ((trim)>0 ? -1 : (trim)<0 ? 1 : 0))

w_int priority_j2k(w_int java_prio, w_int trim);

#define WG_SYSTEM                           0x00000001   /* only 1 group has this flag set...          */
#define w_groupFromThreadInstance(i)        (getWotsitField((i), F_Thread_wotsit)->group)
#define w_threadFromThreadInstance(i)       (getWotsitField((i), F_Thread_wotsit))

typedef struct w_Group {
  w_group parent;
  char   *label;
  w_flags flags;
  w_string name;
  w_int maxPriority;
  w_boolean isDaemon;
  x_mutex mutex;
  w_instance ThreadGroup;
  w_realm realm;
  x_queue box;
  w_ubyte *boxSpace;
  w_thread manager;

} w_Group;

/// Check that a w_group pointer really does point to a w_Group
static inline w_group checkGroupPointer(w_group g) {
#ifdef RUNTIME_CHECKS
  if (*((w_word*)g->label) != *((w_word*)"group")) {
    wabort(ABORT_WONKA,"Alleged w_group pointer %p has incorrect label\n",g);
  }
#endif
  return g;
}

#define WT_GROUP_MANAGER              0x00000001 /* the thread is a group manager thread */
#define WT_THREAD_INTERRUPTED         0x00000004 /* the thread has been interrupted */
#ifdef GC_SAFE_POINTS
#define WT_THREAD_NOT_GC_SAFE         0x00000100 /* the thread is engaged in activity which conflicts with GC. */
#define WT_THREAD_BLOCKED_BY_GC       0x00000200 /* the thread is forbidden any activity which conflicts with GC. */
#define WT_THREAD_GC_SAFETY_STATUS    (WT_THREAD_NOT_GC_SAFE | WT_THREAD_BLOCKED_BY_GC)
#define WT_THREAD_SAFE_POINT_REQUEST  0x00000400 /* the thread has received a request from GC to become GC-safe. */
#endif

typedef struct x_Slot {
  x_word c;
  x_word s;
} x_Slot;

typedef struct x_Frame {
  volatile x_slot top;                 // push ==> *top->c = c; *top->s = s; top += 1; pop ==> l->c = top[-1].c; l->s = top[-1].s; top -= 1;
  x_frame         previous;            // points to caller or arguments stub frame
  w_method        method;              // points to method that this frame refers to, when NULL it's a stub frame
  w_clazz         clazz;               // the current clazz, also NULL for a stub frame
  w_thread        thread;              // points to current wonka thread
  volatile x_slot auxs;                // stack pointer to references OR monitored objects in this frame
  w_word          flags;               // Flags
  w_code          current;             // The opcode pointer at method call or exception; pc = frame->current - frame->method_.exec.code
  w_instance      * map;               // A pointer to an array of references (stack map)
  x_Slot          Slots[0];            // Array of local and stack slots, and the returned result !
} x_Frame;

typedef struct x_Exr {
  w_method   method;
  w_int      pc;
  w_int      position;
} x_Exr;

/*
** Tag symbols for the auxillary stack; note that when a tag is greater than 'stack_trace', the symbol contains
** the address of the monitor that is used to lock the object! Use the isMonitoredSlot function to check wether
** it is a monitored object.
*/

static const w_word stack_notrace   = 0; // The stack item does not refer to an object that needs GC tracing; must be 0!
static const w_word stack_trace     = 1; // Refers to an object that needs GC tracing, main stack and auxillary stack.

inline static w_int isMonitoredSlot(x_slot slot) {
  return (slot->s > stack_trace);
}

void callMethod(x_frame arguments, w_method method);

/*
* Stack frame flags
*/

//#define FRAME_CLINIT        0x00000004   /* Frame is used to run a <clinit> method  */
#define FRAME_NATIVE        0x00000001   /* Frame is a host frame for a native method */
#define FRAME_JNI           0x00000002   /* Frame is used in a JNI call */
#define FRAME_STACKMAP      0x00000004   /* Frame has stack map  */
#define FRAME_REFLECTION    0x00000008   /* Frame is used in reflection invocation */
#define FRAME_PRIVILEGED    0x00000010   /* Frame was built using doPrivileged */
//#define FRAME_PARENT_UNSAFE 0x00000020  /* Bottom frame launched from unsafe context */

void addLocalReference(w_thread thread, w_instance instance);

void pushLocalReference(x_frame frame, w_instance instance);
void pushMonitoredReference(x_frame frame, w_instance instance, x_monitor monitor);
void removeLocalReference(w_thread thread, w_instance instance);

/**
** Get the security domain associated with a frame.
** Note that for the time being we simply ignore native code.
** Steven, you may need to adapt this.
*/
#define frame2domain(f) getReferenceField(clazz2Class((f)->method->clazz), F_Class_domain))

/**
** getCurrentMethod and getCurrentClazz return the Java method currently
** being executed and the class in which it was defined, respectively.
** getCallingMethod and getCallingClazz return the method which called
** the current Java method and the class in which it was defined.
** Note that we say the -Java- method: if called from within a native
** method, these functions will return information for the Java method
** which invoked the native code.
** getCurrentInstance returns the 'this' of the instance method currently
** being executed (or null if a static method), and getCallingInstance
** does the same for the method which called the current Java method.
*/

x_frame getTopFrame(w_thread thread);
w_method getCurrentMethod(w_thread thread);
w_clazz getCurrentClazz(w_thread thread);
w_instance getCurrentInstance(w_thread thread);
w_method getCallingMethod(w_thread thread);
w_clazz getCallingClazz(w_thread thread);
w_instance getCallingInstance(w_thread thread);

/*
** The JNIEnv* parameter of a JNI call points at field natenv of the current
** Wonka thread.  Putting natenv as the first field of w_Thread simplifies
** the inline functions w_thread2JNIEnv and JNIEnv2w_thread.
*/

typedef struct w_Thread {
  
  /*
  ** The JNI environment pointer. Make sure it is always the first element of the
  ** w_Thread structure since the JNIEnv2w_thread relies on this! An environment
  ** pointer can then just be cast to a w_thread pointer...
  */
  
  const JNINativeInterface*   natenv;

  char      *label;
  w_flags    flags;  
  volatile x_frame    top;
  volatile w_instance exception;      // currently pending exception when not NULL, is also in thread->Thread[F_Thread_thrown]
  w_size     maxframes;               // Maximum number of frames we allow this thread to have on the stack
  w_size     numframes;               // The current number of frames this thread has on the stack
  w_string   name;
  volatile x_ubyte  state;
  w_group    group;
  volatile w_instance Thread;
  w_boolean  isDaemon;
//  w_jstack   jstack;
  w_size     jpriority;
#ifdef GC_SAFE_POINTS
#ifdef USE_PETERSONS_ALGORITHM
/*
  Peterson's algorithm (http://www.csee.wvu.edu/~jdm/classes/cs356/notes/mutex/Peterson.html)
  uses a flag for each 'process' and a 'turn' variable which takes the value
  [1..n]. For us a 'process' means either the thread itself (going Unsafe) or
  another thread which is marking the stack (there can only be one such thread
  at a given moment). Instead of a simple boolean we use a pointer which is
  either NULL or the identity of the claiming thread (makes debugging a darn
  sight easier). Our `turn' variable takes the value 1 or 2, but we call it
  an x_sleep because we also use it for a back-off timer: this gives the
  marking thread a slight advantage (I think).
*/
  volatile w_thread unsafe_thread;
  volatile w_thread gc_thread;
  volatile x_sleep  turn;
#else
  x_Monitor gc_state_monitor;
#endif
#endif

  /*
  ** The native part of a Wonka thread, it's kernel thread, the stack and it's size.
  */

#ifdef JSPOT
  int counter;
#endif
  
  x_thread  kthread;
  w_ubyte *   kstack;
  w_size     ksize;
  w_size     kpriority;
#ifdef DEBUG
  w_size     nframes;
#endif
  x_slot     maxauxs;                 // The end pointer to the locals space.
  x_Frame    Frame;                   // The root frame.
  x_Slot     Arguments[4];            // The arguments space for the root frame.
  x_slot     auxs;                    // The locals space, variable sized.
//  void      *frames;                  // The Java stack frames
//  w_size     frames_size;             // (Current) size of the above in bytes
} w_Thread;

/*
** Thread states
*/

typedef enum {
  wt_ready        =   0,   /* The states [0 - 14] are corresponding to Oswald thread states. */
  wt_mutex        =   1,
  wt_queue        =   2,
  wt_mailbox      =   3,
  wt_semaphore    =   4,
  wt_signals      =   5,
  wt_monitor      =   6,
  wt_block        =   7,
  wt_map          =   8,
  wt_joining      =   9,
  wt_waiting      =  10,
  wt_suspended    =  11,
  wt_sleeping     =  12,
  wt_rescheduled  =  13,
  wt_ended        =  14,
  wt_unstarted    =  15,   /* The states [15 - 17] are Wonka thread specific states. */
  wt_dying        =  16,
  wt_dead         =  17,
} wt_state;

inline static wt_state threadState(w_thread thread) {

  x_state state = thread->kthread ? x_thread_state(thread->kthread) : wt_ready;

  return (state == xt_ready) ? thread->state : state;

}

inline static int threadIsActive(w_thread thread) {

  return threadState(thread) < wt_ended;

}

w_thread  _currentWonkaThread(const char *f, int l);
#define currentWonkaThread     _currentWonkaThread(__FUNCTION__, __LINE__)
#define currentWonkaGroup      ((currentWonkaThread)->group)

/******************************************************************************

  GC SAFE POINTS

  The GC safe-point mechanism associates a GC Status with each thread:
    - GC Status "NOT_GC_SAFE": the thread is engaged in activites which are
      incompatible with the "prepare" or "mark" phase of garbage collection,
      i.e. it is modifying the stack or modifying reference fields of classes,
      objects, or arrays.
    - GC Status "BLOCKED_BY_GC": another thread is in either the "prepare" or
      the "mark" phase of garbage collection, and therefore this thread is 
      forbidden from entering the "NOT_GC_SAFE" state.
    - GC Status "neutral": the thread is in neither of the two states above,
      and is free to enter one or other of them.
  State diagram:
                  <- enterUnsafeRegion        GC by other thread ->
    NOT_GC_SAFE                        neutral                    BLOCKED_BY_GC
                    enterSafeRegion ->            <- finished
                  
                  

  Initially a thread has GC Status "neutral". If an interpreted method is 
  called then enterUnsafeRegion is called, so that interpreted code is treated
  as "mostly unsafe"; on exit from the interpreter enterSafeRegion is called.
  During interpretation, matched pairs of enterSafeRegion/enterUnsafeRegion
  are made around:
    - allocating an instance. (The allocation routines call x_mem_lock(),
      so mutual exclusion with GC is already guaranteed).
    - calling another interpreted or JNI method, including side-effects 
      such as the <clinit> of a class on its first active use.  If the 
      called method is another interpreted method, another call to 
      enterUnsafeRegion will be made in the nested interpreter; if it
      is a JNI method then it will be entered with GC status "neutral".
      J-spotted methods are entered with GC Status NOT_GC_SAFE, i.e. they
      too are treaded as "mostly unsafe".
  Before any transfer of control within the method, if the GC Request flag
  (see below) is set then a call to gcSafePoint is made. This is equivalent 
  to enterSafeRegion immediately followed by enterUnsafeRegion, and gives us
  a guarantee that the "neutral" state will be entered reasonably often. 

  The "write barrier" macros setReferenceField, setStaticReferenceField,
  and setArrayReferenceField all call enterUnsafeRegion before updating
  the value of the field, and restore the previous status afterward. 

  When a thread (any thread, not just the Undertaker) initiates the prepare/
  mark phase of GC, it first sets the GC Request flag of every other thread,
  and then tries to bring all other thread to GC Status BLOCKED_BY_GC. Only
  when all other threads have reached this status will the prepare/mark phase
  be carried out; the other threads are then allowed to return to "neutral"
  while the sweep phase proceeds. (From "neutral" they may of course enter
  NOT_GC_SAFE at any time: this is harmless).

  The net result is to ensure that no thread can enter NOT_GC_SAFE (and hence
  no thread can modify stacks or the reachability graph of the heap) during
  the prepare/mark phase of GC; equally, the prepare/mark phase cannot be
  entered while any thread is engaged in such "mutating" activity.

  Currently we probably define too much code as "unsafe": however this is
  better than too little, and it gives us a basis to optimise from.
  
  For an explanation of the mutual exclusion algorithm, see the definition
  of w_Thread above.

******************************************************************************/

inline static w_boolean lockGCStatus(w_thread target_thread, w_thread calling_thread, w_flags requested_flag) {
#ifdef GC_SAFE_POINTS
#ifdef USE_PETERSONS_ALGORITHM
  volatile w_thread *my_slot;
  volatile w_thread *other_slot;
  x_sleep   ticks;

  if (isSet(requested_flag, WT_THREAD_NOT_GC_SAFE)) {
    my_slot = &target_thread->unsafe_thread;
    other_slot = &target_thread->gc_thread; 
    ticks = 2;
    woempa(1, "Thread %t is locking thread %t with WT_THREAD_NOT_GC_SAFE\n", calling_thread, target_thread);
  }
  else {
#ifdef RUNTIME_CHECKS
    if (target_thread == calling_thread) {
      wabort(ABORT_WONKA, "lockGCStatus(...) called with thread (%t) == calling_thread, requested_flag (0x%08x) == WT_THREAD_BLOCKED_BY_GC\n", target_thread);
    } 
#endif
    my_slot = &target_thread->gc_thread; 
    other_slot = &target_thread->unsafe_thread;
    ticks = 1;
    woempa(1, "Thread %t is locking thread %t with WT_THREAD_BLOCKED_BY_GC\n", calling_thread, target_thread);
  }

  if (*my_slot == calling_thread) {

    return WONKA_TRUE;

  }
#ifdef RUNTIME_CHECKS
  else if (*my_slot) {
    wabort(ABORT_WONKA, "Thread %t wants to lock %t, but was locked by %t\n", calling_thread, target_thread, *my_slot);
  }
#endif

  *my_slot = calling_thread;
  target_thread->turn = 3 - ticks;
  while (*other_slot && (target_thread->turn != ticks)) {
    woempa(1, "Thread %t: thread %t is locked by %t and not our turn, backing off\n", calling_thread, target_thread, *other_slot);
//    wprintf("Thread %t: thread %t is locked by %t and not our turn, backing off\n", calling_thread, target_thread, *other_slot);
    x_thread_sleep(ticks);
  }
  woempa(1, "Thread %t: thread %t locked successfully\n", calling_thread, target_thread);
  setFlag(target_thread->flags, requested_flag);

  return WONKA_FALSE;
#else
  w_boolean old_flag;
  w_word other_flag = WT_THREAD_GC_SAFETY_STATUS ^ requested_flag;
  x_status monitor_status;

  old_flag = isSet(target_thread->flags, requested_flag);
  if (old_flag) {

    return WONKA_TRUE;

  }

  monitor_status = x_monitor_eternal(&target_thread->gc_state_monitor);
  if (monitor_status != xs_success) {
    wabort(ABORT_WONKA, "Unable to enter gc state monitor of %t!\n", target_thread);
  }
  while (isSet(target_thread->flags, other_flag)) {
    monitor_status = x_monitor_wait(&target_thread->gc_state_monitor, NEARLY_ETERNAL);
    if (monitor_status == xs_interrupted) {
      x_monitor_eternal(&target_thread->gc_state_monitor);
    }
  }
  setFlag(target_thread->flags, requested_flag);
  x_monitor_exit(&target_thread->gc_state_monitor);
  return old_flag;

#endif
#endif

  return WONKA_TRUE;
}

inline static w_boolean unlockGCStatus(w_thread target_thread, w_thread calling_thread, w_flags requested_flag) {
#ifdef GC_SAFE_POINTS
#ifdef USE_PETERSONS_ALGORITHM
  volatile w_thread  other_thread;
  volatile w_thread *my_slot;

  unsetFlag(target_thread->flags, requested_flag);
  if (isSet(requested_flag, WT_THREAD_NOT_GC_SAFE)) {
    woempa(1, "Thread %t is unlocking thread %t with WT_THREAD_NOT_GC_SAFE\n", calling_thread, target_thread);
    my_slot = &target_thread->unsafe_thread;
    other_thread = target_thread->gc_thread;
  }
  else {
    woempa(1, "Thread %t is unlocking thread %t with WT_THREAD_BLOCKED_BY_GC\n", calling_thread, target_thread);
    my_slot = &target_thread->gc_thread; 
    other_thread = target_thread->unsafe_thread;
  }

  if (*my_slot != calling_thread) {
#ifdef RUNTIME_CHECKS
    if (*my_slot) {
      wabort(ABORT_WONKA, "Thread %t unlocked by %t, but was locked by %t\n", target_thread, calling_thread, *my_slot);
    }
#endif

    return WONKA_FALSE;

  }

  *my_slot = NULL;

  return WONKA_TRUE;

#else
  w_boolean old_flag;
  x_status monitor_status;

  old_flag = isSet(target_thread->flags, requested_flag);
  if (!old_flag) {

    return WONKA_FALSE;

  }

  monitor_status = x_monitor_eternal(&target_thread->gc_state_monitor);
  if (monitor_status != xs_success) {
    wabort(ABORT_WONKA, "Unable to enter gc state monitor of %t!\n", target_thread);
  }
  if (old_flag) {
    unsetFlag(target_thread->flags, requested_flag);
  }
  x_monitor_notify_all(&target_thread->gc_state_monitor);
  x_monitor_exit(&target_thread->gc_state_monitor);

  return old_flag;

#endif
#endif

  return WONKA_FALSE;
}

inline static w_boolean enterSafeRegion(w_thread thread) {
#ifdef GC_SAFE_POINTS
  return unlockGCStatus(thread, thread, WT_THREAD_NOT_GC_SAFE);
#else
  return WONKA_FALSE;
#endif
}

inline static w_boolean enterUnsafeRegion(w_thread thread) {
#ifdef GC_SAFE_POINTS
  return lockGCStatus(thread, thread, WT_THREAD_NOT_GC_SAFE);
#else
  return WONKA_FALSE;
#endif
}

inline static w_boolean pendingGCRequest(w_thread thread) {
#ifdef GC_SAFE_POINTS
  return isSet(thread->flags, WT_THREAD_SAFE_POINT_REQUEST);
#else
  return WONKA_FALSE;
#endif
}

inline static w_boolean threadIsUnsafe(w_thread thread) {
#ifdef GC_SAFE_POINTS
  return isSet(thread->flags, WT_THREAD_NOT_GC_SAFE);
#else
  return WONKA_FALSE;
#endif
}

inline static void gcSafePoint(w_thread thread) {
#ifdef GC_SAFE_POINTS
#ifdef USE_PETERSONS_ALGORITHM
  if (unlockGCStatus(thread, thread, WT_THREAD_NOT_GC_SAFE)) {
    while (pendingGCRequest(thread)) {
//      wprintf("Thread %t : a safe point request is pending\n", thread);
      x_thread_sleep(1);
    }
    lockGCStatus(thread, thread, WT_THREAD_NOT_GC_SAFE);
  }
#else
  x_status monitor_status;

  if (threadIsUnsafe(thread) && pendingGCRequest(thread)) {
    monitor_status = x_monitor_eternal(&thread->gc_state_monitor);
    if (monitor_status != xs_success) {
      wabort(ABORT_WONKA, "Unable to enter gc state monitor of %t!\n", thread);
    }
    unsetFlag(thread->flags, WT_THREAD_NOT_GC_SAFE);
    while (pendingGCRequest(thread)) {
//      wprintf("Thread %t : a safe point request is pending\n", thread);
      x_monitor_notify_all(&thread->gc_state_monitor);
      monitor_status = x_monitor_wait(&thread->gc_state_monitor, NEARLY_ETERNAL);
      if (monitor_status == xs_interrupted) {
        x_monitor_eternal(&thread->gc_state_monitor);
      }
    }
    setFlag(thread->flags, WT_THREAD_NOT_GC_SAFE);
    x_monitor_exit(&thread->gc_state_monitor);
  }
#endif
#endif
}

#if defined(GC_SAFE_POINTS) && defined(RUNTIME_CHECKS)
inline static void _threadMustBeSafe(w_thread thread, char *file, int line, char *function) {
  if (isSet(thread->flags, WT_THREAD_NOT_GC_SAFE)) {
    wabort(ABORT_WONKA, "Thread must be GC safe at %s:%d (%s)!\n", file, line, function);
  }
}

inline static void _threadMustBeUnsafe(w_thread thread, char *file, int line, char *function) {
  if (isNotSet(thread->flags, WT_THREAD_NOT_GC_SAFE)) {
    wabort(ABORT_WONKA, "Thread must not be GC safe at %s:%d (%s)!\n", file, line, function);
  }
}

#define threadMustBeSafe(t) _threadMustBeSafe((t), __FILE__, __LINE__, __FUNCTION__)
#define threadMustBeUnsafe(t) _threadMustBeUnsafe((t), __FILE__, __LINE__, __FUNCTION__)
#else
#define threadMustBeSafe(t)
#define threadMustBeUnsafe(t)
#endif

/// Check that a w_thread pointer really does point to a w_Thread
#ifdef RUNTIME_CHECKS
static INLINE w_thread checkThreadPointer(w_thread t) {
  if (*((w_word*)t->label) != *((w_word*)"thread")
        && *((w_word*)t->label) != *((w_word*)"group")) {
    wabort(ABORT_WONKA, "%p is not a thread!\n", t);
    // XXX NAH
    // this makes o4p build fail - why does oswald work?
    //wabort(ABORT_WONKA,"Alleged w_thread pointer %p has incorrect label\n",t);
  }
  return t;
}
#else
#define checkThreadPointer(t) (t)
#endif

inline static w_thread  JNIEnv2w_thread(JNIEnv *env) {
  return checkThreadPointer((w_thread)env);
}

inline static JNIEnv *w_thread2JNIEnv(w_Thread *t) {
  return &checkThreadPointer(t)->natenv;
}

inline static w_instance JNIEnv2Thread(JNIEnv *env) {
  return JNIEnv2w_thread(env)->Thread;
}

/*
** From an env pointer, give back the current top frame
*/

#define JNIEnv2frame(e)       (JNIEnv2w_thread(e)->top)

extern w_hashtable thread_hashtable;

void initKernel(void);
void startKernel(void);
w_thread w_threadCreate(w_thread parent, w_object root);

w_int nextGroupId(void);
w_int nextThreadId(void);

w_thread createThread(w_thread current, w_instance Thread, w_group group, w_string name, w_size stacksize, w_size locals);

void createThreadGroup(w_instance ThreadGroup, w_group parent, w_string name, w_size stacksize);

void requestThreadTermination(w_thread); 
void requestThreadSuspension(w_thread); 
void requestThreadResumption(w_thread); 

w_method  findRunMethod(w_clazz);
w_group getRootGroup(w_group group);

char *threadDescription(w_thread);
char *groupDescription(w_group);

void addThreadToGroup(w_thread thread, w_group group);
void removeThreadFromGroup(w_thread thread, w_group group);

#define STACK_PRESET                        0xaa

/*
** Thread priorities:
**
** ---------------+-----------------------------------------------------------
** kernel prio    | Description of thread running at this kernel priority
** ---------------+-----------------------------------------------------------
**    0           |
**    1           |
**    2           | Garbage collector run priority
**    3           |
**    4           | Thread specific waiter thread
**    5           | Locker service thread
**    6           | ThreadGroup system manager thread
**    7           | ThreadSystem thread (Init thread)
**    8           | Stream threads
**    9           |
**   10           | Finalizer thread
**   11           | Normal Java thread group manager
**   12           | Java priority 10
**   13           |
**   14           | Java priority 9
**   15           |
**   16           | Java priority 8
**   17           |
**   18           | Java priority 7
**   19           |
**   20           | Java priority 6
**   21           | TCP/IP protocol stack
**   22           | Java priority 5
**   23           |
**   24           | Java priority 4
**   25           |
**   26           | Java priority 3
**   27           |
**   28           | Java priority 2
**   29           |
**   30           | Java priority 1
**   31           | Garbage collector iddle thread
** ---------------+-----------------------------------------------------------
*/

#define EXCEPTION_NO_MESSAGE (char *)NULL

extern const char *message2char[];

#define MESSAGE(m)                          (message2char[m->request])

#define MESSAGE_INTERRUPT                   0  // Not currently used
#define MESSAGE_THROWABLE_PENDING           1  // Not currently used
#define MESSAGE_SEND                        2  // Not currently used
#define MESSAGE_CONSUMED                    3
#define MESSAGE_ADDRESSEE_UNKNOWN           4  // Not currently used
#define MESSAGE_MANAGER_BOX_FULL            5  // Not currently used
#define MESSAGE_ADDRESSEE_BOX_FULL          6  // Not currently used
#define MESSAGE_HOLD_OFF                    7  // Not currently used
#define MESSAGE_RELEASE                     8
#define MESSAGE_START_THREAD                9  // Not currently used
#define MESSAGE_STOP_THREAD                10

typedef struct w_Message {

  /*
  ** One of the above defined MESSAGE_ types.
  */

  w_int request;

  /*
  ** The thread sent the message.
  */
  
  w_thread sender;
  
  /*
  ** The receiving thread.
  */
  
  w_thread addressee;
  
  /*
  ** The content of the message.
  */

  void *content;

  /*
  ** The number of times the message bounced.
  */

  w_int bounced;

} w_Message;

void setUpSystemThreadGroup(void);

void groupManagerEntry(void* manager);

extern w_int nondaemon_thread_count;

extern const char *running_thread_report(x_thread);
extern char * print_thread_short(char*, int*, void*, int w, int p, unsigned int f);
extern char * print_thread_long(char*, int*, void*, int w, int p, unsigned int f);

/*
** This variable changes from FALSE to TRUE when the initial Wonka threads
** have been set up.
*/
extern w_boolean haveWonkaThreads;

/*
** Remove the topmost local reference from a stack frame.
*/
inline static void popLocalReference(x_frame frame) {
  woempa(7, "Popping aux[%d] of %t (%j)\n", frame->auxs - frame->thread->auxs - 1, frame->thread, frame->auxs[-1].c);
  frame->auxs -= 1;
}

#endif /* _THREADS_H */
