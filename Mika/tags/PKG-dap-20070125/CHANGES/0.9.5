Changes in 0.9.5
----------------

AWT/Rudolph - Contributed by Michael Smith
 - Use console keyboard, add keyboard_init and
   keyboard_shutdown functions to restore console to cooked mode when Wonka
   terminates.
 - Set the palette in 8-bit mode under Linux.
 - Allow some font files to be missing, so long as at least one is found.
 - Mike's patch to switch to another VT is not included, because it causes
   problems when Wonka exits abnormally (e.g. SIGSEGV).
AWT/Rudolph - other changes
 - Flexible code to set matte / splash screen 
   (see e.g. awt/rudolph/include/clear.xpm, splash.xpm).
 - Replaced a couple of hard-coded Color's by appropriate SystemColor's.
 - Set a unique name from within the constructor of a Component.
 - Instead of calling layoutContainer() on the layoutManager directly from
   within validateTree(), call doLayout().
 - When a component is added to a container and that component was already
   in that container, do nothing.  (We used to delete it, and then add it again)
 - Made java.awt.Event compliant with 1.1, many other compatibility improvements
   thanks to japitools.
 - Lots of updates to components to get them to work with add/removeNotify.
 - VTE: removed the byte array from the DriveCar test and made it use an image.
 - VTE: added a confirmation panel before the VTE really calls System.exit(0)

Core libraries
 - Added a SIGQUIT (3) handler which prints out the threads, their state and
   their stacktrace, and the state of some important mutex/monitors.
  (pressing CTRL-\ sends a SIGQUIT)
 - Made it possible to grow/shrink the locals.  Wonka will no longer crash 
  (stack overflow/corruption) when local variable space is exhausted. 
 - Go straight to system class loader when loading classes whose names begin
   with 'java.' or 'wonka.', don't consult user-defined class loaders.
 - Defer identifying the implementation of an interface method in a class
   until the method is actually invoked on that class.  This means that Wonka
   will no longer complain about interface methods which are not implemented
   but are also never called, bringing joy to OTF developers.
 - If the second parameter of get[Declared][Constructor,Method] is null,
   treat it as a zero-length array.
 - Moved the allocation of a Thread's native stack from <init> time to start()
   time. This lowers the memory cost of unstarted threads (as used by e.g. the
   ShutdownHooks mechanism).
 - Added a new resource file wonka.properties, which is read in after
   system.properties; wonka properties can be read using Wonka.getProperty(),
   which has the same semantics as System.getProperty().
 - Allow 'aliases' for timezones, e.g. Europe/Brussels is an alias for ECT
   (sic).  The aliases are taken from the Wonka property 
   wonka.timezone.<TLA>.aliases, where <TLA> is one of the three-letter
   timezone names specified in the JDK 1.1 documentation.
 - Lots of improvements to RMI and serialisation. Support for ClassAnnotation,
   partial DGC support.
 - Added a real implementation of Throwable/fillInStackTrace().
 - Added the missing interface HttpConnection to javax/microedition/io 
 - Implementation of PUT and POST for HTTP connections, handle chunked data.
   User-defined protocol handlers are now possible.
   If an URL points to a jar file transform the URL to a jar-url.
 - Added native support for shutdownIn/Output and the SO_KEEPALIVE socket option.
 - Always exit if application was not successfully launched, don't just hang.
 - Many API updates to fix discrepancies reported by japitools.
 - Do not compress wre.jar by default (results in faster startup). Compression
   can be turned back on using -sCOMPRESS_WRE_JAR=true .
 - Added 2 subclasses of VirtualMachineError for methods not implemented in
   Wonka:
   - DeprecatedMethodError: should be thrown when method is deprecated but not implented
   - UnsupportedMethodError: should be thrown when a class method is not implemented yet
 - A number of changes to support bytecode generated by recent versions of
   Javac and Jikes (e.g. we no longer need "Miranda" methods). Thanks to
   Mark Anderson for pointing out these problems and their causes.
 - SHARED_HEAP now defaults to false.
 - Partially implementation of java.lang.reflect.Proxy class, work continues. 
 - made Properties load and store aware of special characters (like : =) in keys.
   Backslashes are now added/removed when needed.
 - Better handling of streams when a process started with Runtime/exec() dies.
J-spot
 - A lot of improvements, now becoming quite usable. Still disabled by default.
