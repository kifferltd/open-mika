 Configure Wonka for eCos
/--------------------------------------------------------------------/

 
 Configuration/wonka/default
/--------------------------------------------------------------------/
Set some options to get wonka running properly. These are in the CVS
in Configuration/wonka/ecos. These are the changes made from the default file.

SCHEDULER default = o4e ;		// our own scheduler
AWT default = none ;     		// no AWT (yet)
FICL default = false ;			// block out debugger thread, 
					// will disappear in time anyway
FILESYSTEM default = vfs ;		// We work with the in-house fs
NETWORK default = none ;		// no network support (yet)
MODULES default = false ;		// normally this is already ok
SHARED_OBJECTS default = false ;	// ecos hasn't got dynamic loading, so 
STATIC default = true ;			// we make it all static

You can use the ecos configuration file with the -sWONKA_CONFIG=ecos option


 Configuration/host/ecos
/--------------------------------------------------------------------/
Match the directories to your own eCos-library directories. This one 
of the directories where you builded your library.

CCFLAGS += -g -I/data/builds/a_name_install/include ;
LINKFLAGS += -L/data/builds/a_name_install/lib -Ttarget.ld -nostdlib ;
                                                  ^             ^
                                                linker script   |
                                                don't use the linux lib's


 VisualTest en Mauve Test
/--------------------------------------------------------------------/
These are the test-suites for the AWT. At the time writing AWT isn't 
implemented. These must be commented out in tool/Jamfile


 wonka/src/native/java/Jamfile
/--------------------------------------------------------------------/
There isn't any networking support yet, so just leave the java.net package out
#SubInclude WONKA_TOP wonka src native java net ;


 wonka/java/com/acunia/wonka/test/Jamfile
/--------------------------------------------------------------------/
The Calculator test uses some AWT stuff, so just leave the following out of the
jarfile: Calculator.java CalculatorApplication.java


 wonka/src/vm/coreclasses.in
/--------------------------------------------------------------------/

There no  network support yet (go go Tim) so comment everything 
network-alike out of coreclasses.in like this :

#java/net/InetAddress
#       address                 I
#       family                  I
#       hostName                Ljava/lang/String;
#       addressCache            Ljava/lang/String;
#       createInetAddress       (Ljava/lang/String;)V           InetAddress_createInetAddress
#       getLocalName            ()Ljava/lang/String;            InetAddress_getLocalName
#        lookupName             ()Z                             InetAddress_lookupName
#java/net/DatagramSocketImpl
#        localPort              I
#        fd                     Ljava/io/FileDescriptor;
#java/net/DatagramPacket
#        bytes     [B
#        length    I
#        offset    I
#        port      I
#        address   Ljava/net/InetAddress;
#java/net/PlainDatagramSocketImpl
#        wotsit        +
#       timeout       I
#        nativeCreate  ()V                          PlainDatagramSocketImpl_nativeCreate
#       finalize        ()V                             PlainDatagramSocketImpl_finalize
#        bind          (ILjava/net/InetAddress;)V    PlainDatagramSocketImpl_bind
#        send          (Ljava/net/DatagramPacket;)V  PlainDatagramSocketImpl_send
#        _receive      (Ljava/net/DatagramPacket;)I  PlainDatagramSocketImpl_receive
#        peek          (Ljava/net/InetAddress;)I     PlainDatagramSocketImpl_peek
#        close         ()V                           PlainDatagramSocketImpl_close
#        join         (Ljava/net/InetAddress;)V     PlainDatagramSocketImpl_join
#        leave        (Ljava/net/InetAddress;)V     PlainDatagramSocketImpl_leave
#        getTimeToLive ()I                          PlainDatagramSocketImpl_getTimeToLive
#        setTimeToLive (I)V                         PlainDatagramSocketImpl_setTimeToLive
#       getSocket     ()I                           PlainDatagramSocketImpl_getSocket           
#        getBindAddress         (I)I                        PlainDatagramSocketImpl_optBindAddress
#        optMulticastIF         (ILjava/net/InetAddress;Z)I PlainDatagramSocketImpl_optMulticastIF
#        optNoDelay    (IZZ)Z                       PlainDatagramSocketImpl_optNoDelay
#        optLinger     (II)I                        PlainDatagramSocketImpl_optLinger
#        optIntOptions  (III)I                      PlainDatagramSocketImpl_optIntOptions
#java/net/SocketImpl
#        address                Ljava/net/InetAddress;
#        port                   I
#        localport              I
#java/net/PlainSocketImpl
#       wotsit                  +
#        closed                 Z
#       timeout                 I
#        read                   ([BII)I PlainSocketImpl_read
#        write                  ([BII)V PlainSocketImpl_write
#        nativeCreate           ()V     PlainSocketImpl_nativeCreate   
#       finalize                ()V     PlainSocketImpl_finalize
#        listen                 (I)V    PlainSocketImpl_listen
#        nativeAccept           (Ljava/net/SocketImpl;)I        PlainSocketImpl_accept
#        available              ()I     PlainSocketImpl_available
#        bind                   (Ljava/net/InetAddress;I)V      PlainSocketImpl_bind
#        close                  ()V     PlainSocketImpl_close
#        connect                (Ljava/net/InetAddress;I)V      PlainSocketImpl_connect
#       getSocket               ()I                             PlainSocketImpl_getSocket
#java/net/ConnectException                                         
#java/net/BindException                                         
#java/net/SocketException                                         
#java/net/UnknownHostException


 fs/vfs/src/vfs_functions.c
/--------------------------------------------------------------------/
vfs_rename isn't completely finished yet, this function is in fact
as empty as can be. So please don't rename anything in the java programs


 wonka/hal/hostos/ecos/src/exec.c
/--------------------------------------------------------------------/
All functions don't do anything. This has something to do with 
networking... If you want to see what was in it, just take a look at 
wonka/hal/hostos/linux/src/exec.c. It's just a copy.


 Filesystem
/--------------------------------------------------------------------/
eCos doesn't have a filesystem, we use Acunia's own vfs-filesystem.
The filesystem-story: We statically link the filesystem into the 
binary. This filesystem is made in a file of fixed size we mount,
copy our stuff into, unmount, make a binary of it, put it into an archive
and then link into wonka. Kinky not?

1. jam -sHOSTOS=ecos -sWONKA_CONFIG=ecos [-sOTHER_STUFF] install

All the libraries will be made, the classes and the wre.jar. But the 
process will fail because image.a (the filesystem archive) doesn't 
exist just yet. Don't panic, this is normal...

2. Make the file system archive

  - Create an image file with the size of the build-???-ecos/wonka/fsroot/
    directory (approximately 1.5Mb without AWT and AWT tests):
    dd if=/dev/zero of=image bs=1k count=1536

  - then make an ext2 filesystem inside the file:
    /sbin/mke2fs -F image

  - Then copy the files and directories that are in the 
    open-wonka/build-???-????/wonka/fsroot dir into the file:

    mount image ./a_directory -o loop
    cp $(WONKA_TOP)/build-???-ecos/wonka/fsroot/* .
    umount

  - then convert the file to elf32 format for syntetic target or 
    elf32-littlearm for ipaq,... and put it in an archive to link 
    into wonka
    
    [linux synthetic target] 
    objcopy -I binary -O elf32-i386 -B i386 image image.o
    [ipaq]
    objcopy -I binary -O littlearm -B arm image image.o
    ar q image.a image.o
    cp image.a open-wonka/fs/vfs/src/

3. Finish
Just jam one more time to link the filesystem. This will only
take a split second.
jam -sHOSTOS=ecos -sWONKA_CONFIG=ecos [-sOTHER_STUFF] install

the binary is now located at build-???-ecos/wonka/


 Stripping
/--------------------------------------------------------------------/
Wonka is pretty big now, this is good for embedded devices. So just
strip all the debug stuff put of wonka

[linux]
strip wonka
[ipaq]
arm-elf-strip

Wonka will now be +/- 6 times as small