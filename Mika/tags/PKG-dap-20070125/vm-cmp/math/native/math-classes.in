#############################################################################
# Copyright (c) 2005 by Chris Gray, trading as /k/ Embedded Java Solutions. #
# All rights reserved.  The contents of this file may not be copied or      #
# distributed in any form without express written consent of the author.    #
#############################################################################

# 
# $Id: math-classes.in,v 1.1 2006/03/14 13:35:52 cvs Exp $
# 
# This file is used to generate math-classes.h and math-classes.c.  
# It contains two types of record:
#
# 1. A single field which is a fully-qualified class name, e.g.
#   java/lang/Object
# There must be no whitespace preceding the name.
#
# This causes code to be generated for two static strings:
#    string_Object	value "java/lang/Object" and
#    string_ObjectDesc  value "Ljava/lang/Object;"
# and for w_clazz clazzObject, initialized by resolving java/lang/Object.
# It also sets the context for the type-2 records which follow.
#
# 2. one or two fields preceded and separated by whitespace 
# (space or tab characters).
#
# 2a.
# 	<field>       <descr>
#
# (where <descr> is a field descriptor) causes an int F_<class>_<field> 
# to be declared and set to the offset of the slot for <field> within an 
# instance of <class>. The <class> is a not fully qualified name like e.g.
# 'Object' or 'StringBuffer'.
#
# 2b.
# 	<field>       +
#
# causes an int F_<class>_<field> to be declared and set equal to the current
# instanceSize, which is then incremented.  The "fictitious" field(s) so
# created follow all "real" fields in the instance structure.
# 
# N.B. The "+"-type fields of Class, Array, Object and String are included 
# in this file for documentation purposes only: the corresponding values are 
# initialized "by hand" in array.c and clazz.c.
#
# 2c.    
# 	<method name> <method descriptor>     <entry point>
#
# causes the function <entrypoint> to be registered as the implementation
# of <class>.<method name> <method descriptor>.
#
# What needs to be in here?
#
# A class should be included in the file if the clazz_... or string_...
# declarations are needed, or if it is essential that the class be loaded
# before Init.run() is executed; this includes all those subclasses of 
# Throwable for which a WS_... constant needs to be defined.  A class
# must also be included if any of its fields or methods are to be included:
# native methods and "fictitious" fields obviously need to be included, but
# other methods and fields need only be present if the F_... declaration
# is needed.
#

java/lang/MathHelper
	toString_internal	(D)Ljava/lang/String;	MathHelper_static_doubleToString
	toString_internal	(F)Ljava/lang/String;	MathHelper_static_floatToString
