#!/bin/bash

###########################################################################
# Copyright (c) 2001 by Punch Telematix. All rights reserved.             #
#                                                                         #
# Redistribution and use in source and binary forms, with or without      #
# modification, are permitted provided that the following conditions      #
# are met:                                                                #
# 1. Redistributions of source code must retain the above copyright       #
#    notice, this list of conditions and the following disclaimer.        #
# 2. Redistributions in binary form must reproduce the above copyright    #
#    notice, this list of conditions and the following disclaimer in the  #
#    documentation and/or other materials provided with the distribution. #
# 3. Neither the name of Punch Telematix nor the names of other           #
#    contributors may be used to endorse or promote products derived      #
#    from this software without specific prior written permission.        #
#                                                                         #
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED          #
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    #
# IN NO EVENT SHALL PUNCH TELEMATIX OR OTHER CONTRIBUTORS BE LIABLE       #
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR            #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR         #
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   #
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    #
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  #
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           #
###########################################################################

# -----------------------------------------------------------------------------

build=
VERBOSE=
let maxtime=1500
let sleeptime=60
let nbrofruns=1
unknownoption=

# -----------------------------------------------------------------------------

function showHelp() {
cat <<EOF
  usage: $0 [-x] [ --help | -h ] [-m maxtime] [-s sleeptine] [-n nbr-of-runs]
            {{<build nbr > ...} | all}
         -x must be first parameter; sets script debug mode
         --help and -h generate this help text
         -m maxtime : sets the maximum elapsed time the mauve tests are expected
           to run for one build; default is $maxtime seconds
         -s sleeptime : sets the time interval between checks testing if mauve
           tests for a build are still running; default is $sleeptime seconds
         -n nbr-of-runs : sets the nbr of times the complete mauve tests have
           to be repeated
         -v : executes mauve tests in verbose mode
         subsequent mandatory parameters are a list of build numbers, or the keyword
         'all'; this keyword means all builds are to be processed

  Execute from within the main directory of a particular release version.
  Executes mauve tests for the specified build(s); compares the resulting
  log file (build<nbr>/fsroot/results) with the list of known FAILS; if no
  are found, the results file is ok, and the mauve tests have passed.
  A success or failure message is written a log file build<nbr>/BUILD<nbr>-MAUVE.log
EOF
}

# -----------------------------------------------------------------------------

function getArgs() {

  if [ $1 ] && [ $1 = "-x" ]; then
    shift
    set -x
  fi

  while [ $# -gt 0 ]; do
    case $1 in
      --help | -h )
         showHelp
         set -
         exit
         ;;
      -v )
         VERBOSE=true
         ;;
      -m )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let maxtime=0
           echo "missing value for -m (maxtime) option"  1>&2
         else
           let maxtime=$2
           shift
         fi
         ;;
      -s )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let sleeptime=0
           echo "missing value for -s (sleeptime) option"  1>&2
         else
           let sleeptime=$2
           shift
         fi
         ;;
      -n )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let nbrofruns=0
           echo "missing value for -n (nbr-of-runs) option"  1>&2
         else
           let nbrofruns=$2
           shift
         fi
         ;;
      1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 )
         if [ -z "$build" ]; then
           build=$1
         else
           build=$build" "$1
         fi
         ;;
      all )
         build="1 2 3 4 5 6 7 8 9 10 11 12 21 22 23 24 25 26 27 28 29 30 31 32"
         ;;
      * )
         echo "$1 : unknown option"  1>&2
         unknownoption=error
         ;;
    esac
    shift
  done

  if [ $maxtime -eq 0 ] || [ $sleeptime -eq 0 ] || [ $unknownoption ]; then
    echo "$0 aborted: parameter errors; try option --help"  1>&2
    set -
    exit
  fi

  let maxtime=$[maxtime * nbrofruns]

  if [ -z "$build" ]; then
    j_abort 1 "error: missing mandatory build number(s)."
  fi

}

# MAIN ------------------------------------------------------------------------

if [ -z $RTTOOL ] ; then
  echo "Environment variable RTTOOL not defined. Cannot proceed."  1>&2
  exit
else
  source $RTTOOL/j_include
  if [ $? -ne 0 ]; then
    echo "Aborting ..." 1>&2
    exit
  fi
fi

getArgs $*

LLP=$LD_LIBRARY_PATH

for b in $build ; do

  echo "BEGIN mauve tests for BUILD$b"
  BUILDDIR=build$b
  LOGFILE=BUILD${b}-MAUVE.log
  RESULTS=fsroot/results
  MAUVEFAIL=fsroot/mauve.fail
  MAUVEDIFF=fsroot/mauve.diff


  export LD_LIBRARY_PATH=$PWD/$BUILDDIR/fsroot/test:$LLP                #required for  jni-tests

  if [ -f ${BUILDDIR}/wonka ]; then
  if [ -f ./refmauve.fail ]; then
  if [ $nbrofruns -eq 1 ] || ([ $nbrofruns -gt 1 ] && [ -f ./refmauve.fail2 ]) ; then

    cd  ${BUILDDIR}

    if [ -z $VERBOSE ]; then    # can't put '&>/dev/null' in a variable
      ./wonka gnu.testlet.TestRunner $nbrofruns  &>/dev/null  &
    else
      ./wonka gnu.testlet.TestRunner $nbrofruns   &
    fi
    mauvepid=$!

    if [ -z $mauvepid ]; then
      echo "BUILD$b: MAUVE TESTS FAIL  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
      echo "" | tee -a $LOGFILE
      echo "  $(BUILDDIR)/wonka : can't execute " | tee -a $LOGFILE
    else

      let cputime1=-1
      cputime2=$(ps h -o time -p ${mauvepid} | cut -c1,2,4,5,7,8)
      if [ -z $cputime2 ] ; then
        cputime2=000000
      fi
      let s=0
      # let tests live while still using cpu or while blocked and max elapsed time not consumed
      while [ $cputime1 -lt $cputime2 ] || ([ $cputime1 -eq $cputime2 ] && [ $s -lt $maxtime ]) ; do
        sleep $sleeptime
        let s=$[s+sleeptime]
        cputime1=$cputime2
        cputime2=$(ps h -o time -p ${mauvepid} | cut -c1,2,4,5,7,8)
        if [ -z $cputime2 ]; then
          let cputime2=-1
        fi
      done

      kill -9 $mauvepid &>/dev/null  # kill it before possibly moving results file

      if [ $nbrofruns -eq 1 ]; then
        sleep 2
        mv $RESULTS $RESULTS.1
      fi

      if [ $cputime2 -ne -1 ] && [ ! $s -lt $maxtime ]; then
        echo "BUILD$b: MAUVE TESTS  elapsed run time exceeds ${maxtime}s: aborted $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
        echo "" | tee -a $LOGFILE
        echo "  examine tail of mauve results file(s):" | tee -a $LOGFILE
        echo "" | tee -a $LOGFILE
        let i=0
        while [ $i -lt $nbrofruns ]; do
          let i=$[i+1]
          echo "$RESULTS.$i" >> $LOGFILE
          echo "------------------" >> $LOGFILE
          tail -6 $RESULTS.$i >> $LOGFILE
        done
      else

        echo "BUILD$b: MAUVE TEST $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
        let i=0
        while [ $i -lt $nbrofruns ]; do
          echo "" >> $LOGFILE
          let i=$[i+1]
          if [ ! -s $RESULTS.$i ]; then   # file does not exist or has size zero
            echo "  RUN $i : TESTS FAIL; results file $BUILDDIR/$RESULTS.$i not found or empty" | tee -a $LOGFILE
          else
            alias grep=grep
            grep -a -e'FAIL' $RESULTS.$i  > $MAUVEFAIL.$i
            if [ $i -eq 1 ]; then
              diff $MAUVEFAIL.$i ../refmauve.fail | grep -e"< FAIL" | sed s/"< FAIL"/FAIL/ > $MAUVEDIFF.$i
            else
              diff $MAUVEFAIL.$i ../refmauve.fail2 | grep -e"< FAIL" | sed s/"< FAIL"/FAIL/ > $MAUVEDIFF.$i
            fi
            if [ -s $MAUVEDIFF.$i ]; then
              echo "  RUN $i : TESTS FAIL; -- un-expected fails -- " | tee -a $LOGFILE
              cat $MAUVEDIFF.$i  >> $LOGFILE
            else
              echo "  RUN $i : TESTS PASS" | tee -a $LOGFILE
            fi
#           rm $MAUVEFAIL.$i
#           rm $MAUVEDIFF.$i
          fi
        done

      fi

      if [ $nbrofruns -eq 1 ]; then
        mv $RESULTS.1 $RESULTS
      fi

      cputime1=  # avoid problems in next loop:
      cputime2=  # let cputime1=-1   wont work

    fi

    cd ..

  else
    echo "BUILD$b: MAUVE TESTS NOT PERFORMED  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
    echo "" | tee -a $LOGFILE
    echo "  file ../refmauve.fail2 not found" | tee -a $LOGFILE
  fi
  else
    echo "BUILD$b: MAUVE TESTS NOT PERFORMED  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
    echo "" | tee -a $LOGFILE
    echo "  file ../refmauve.fail not found" | tee -a $LOGFILE
  fi
  else
    if [ -d ${BUILDDIR} ]; then
      LOGFILE=$BUILDDIR/$LOGFILE
    fi
    echo "BUILD$b: MAUVE TESTS NOT PERFORMED  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
    echo "" | tee -a $LOGFILE
    echo "  file ${BUILDDIR}/wonka not found" | tee -a $LOGFILE
  fi

  echo "END mauve tests for BUILD$b"
  done


# END MAIN ---------------------------------------------------------------------

set -
exit
















