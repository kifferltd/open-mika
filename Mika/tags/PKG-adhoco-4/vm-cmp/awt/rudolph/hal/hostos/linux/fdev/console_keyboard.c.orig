/**************************************************************************
* Copyright (c) 2001, 2002, 2003 by Acunia N.V. All rights reserved.      *
*                                                                         *
* This software is copyrighted by and is the sole property of Acunia N.V. *
* and its licensors, if any. All rights, title, ownership, or other       *
* interests in the software remain the property of Acunia N.V. and its    *
* licensors, if any.                                                      *
*                                                                         *
* This software may only be used in accordance with the corresponding     *
* license agreement. Any unauthorized use, duplication, transmission,     *
*  distribution or disclosure of this software is expressly forbidden.    *
*                                                                         *
* This Copyright notice may not be removed or modified without prior      *
* written consent of Acunia N.V.                                          *
*                                                                         *
* Acunia N.V. reserves the right to modify this software without notice.  *
*                                                                         *
*   Acunia N.V.                                                           *
*   Philips-site 5, box 3       info@acunia.com                           *
*   3001 Leuven                 http://www.acunia.com                     *
*   Belgium - EUROPE                                                      *
**************************************************************************/

/* $Id: console_keyboard.c.orig,v 1.1 2005/06/14 08:48:24 cvs Exp $ */

/*
** Bugs: Many :)
** For a simple keypad it works fine.
**
** - numeric keypad doesn't work properly
** - control key combinations appear as spaces in edit controls (maybe this
**   is normal?)
** - should allocate it's own VT, switch to it, and allow switching;
**   maybe that's fdev's job; in the meantime, run like
**     wonka < /dev/ttyn where <n> is an unused virtual console with no
**     `login' or `getty' running
*/

#include <stdio.h>
#include <unistd.h>
#include <getopt.h>
#include <signal.h>
#include <fcntl.h>
#include <termios.h>
#include <linux/kd.h>
#include <linux/keyboard.h>
#include <sys/ioctl.h>
#include <sys/poll.h>
#include <ctype.h>
#include <fcntl.h>

#include "wonka.h"

/*
** These are coming from java.awt.event.KeyEvent.
** Whenever something changes there, it should be 
** changed here as well...
*/

#define KEY_FIRST        400
#define KEY_TYPED        400
#define KEY_PRESSED      401
#define KEY_RELEASED     402
#define KEY_LAST         402

#define CHAR_UNDEFINED     0
#define VK_UNDEFINED       0
#define VK_CANCEL          3
#define VK_BACK_SPACE      8
#define VK_TAB             9
#define VK_ENTER          10
#define VK_CLEAR          12
#define VK_SHIFT          16
#define VK_CONTROL        17
#define VK_ALT            18
#define VK_PAUSE          19
#define VK_CAPS_LOCK      20
#define VK_KANA           21
#define VK_FINAL          24
#define VK_KANJI          25
#define VK_ESCAPE         27
#define VK_CONVERT        28
#define VK_NONCONVERT     29
#define VK_ACCEPT         30
#define VK_MODECHANGE     31
#define VK_SPACE          32
#define VK_PAGE_UP        33
#define VK_PAGE_DOWN      34
#define VK_END            35
#define VK_HOME           36
#define VK_LEFT           37
#define VK_UP             38
#define VK_RIGHT          39
#define VK_DOWN           40
#define VK_COMMA          44
#define VK_PERIOD         46
#define VK_SLASH          47
  
#define VK_0              48
#define VK_1              49
#define VK_2              50
#define VK_3              51
#define VK_4              52
#define VK_5              53
#define VK_6              54
#define VK_7              55
#define VK_8              56
#define VK_9              57
#define VK_SEMICOLON      59

#define VK_A              65
#define VK_B              66
#define VK_C              67
#define VK_D              68
#define VK_E              69
#define VK_F              70
#define VK_G              71
#define VK_H              72
#define VK_I              73
#define VK_J              74
#define VK_K              75
#define VK_L              76
#define VK_M              77
#define VK_N              78
#define VK_O              79
#define VK_P              80
#define VK_Q              81
#define VK_R              82
#define VK_S              83
#define VK_T              84
#define VK_U              85
#define VK_V              86
#define VK_W              87
#define VK_X              88
#define VK_Y              89
#define VK_Z              90

#define VK_OPEN_BRACKET   91
#define VK_BACK_SLASH     92
#define VK_CLOSE_BRACKET  93

#define VK_NUMPAD0        96  
#define VK_NUMPAD1        97  
#define VK_NUMPAD2        98  
#define VK_NUMPAD3        99  
#define VK_NUMPAD4       100  
#define VK_NUMPAD5       101  
#define VK_NUMPAD6       102  
#define VK_NUMPAD7       103  
#define VK_NUMPAD8       104  
#define VK_NUMPAD9       105  

#define VK_MULTIPLY      106
#define VK_ADD           107
#define VK_SEPARATER     108
#define VK_SUBTRACT      109
#define VK_DECIMAL       110
#define VK_DIVIDE        111

#define VK_F1            112
#define VK_F2            113
#define VK_F3            114
#define VK_F4            115
#define VK_F5            116
#define VK_F6            117
#define VK_F7            118
#define VK_F8            119
#define VK_F9            120
#define VK_F10           121
#define VK_F11           122
#define VK_F12           123

#define VK_DELETE        127
#define VK_NUM_LOCK      144
#define VK_SCROLL_LOCK   145
#define VK_PRINTSCREEN   154
#define VK_INSERT        155
#define VK_HELP          156
#define VK_META          157
#define VK_BACK_QUOTE    192
#define VK_QUOTE         222

#define MOD_SHIFT          1
#define MOD_CTRL           2
#define MOD_META           4
#define MOD_ALT            8

#define CK_SHIFT            1
#define CK_ALTR             2
#define CK_CTRL             4
#define CK_ALTL             8

typedef struct vt_Key2VK {
  w_int    set;
  w_int    value;
  w_int    VK;
} vt_Key2VK;

typedef vt_Key2VK  *vt_key2vk;

/*
** This table converts console events to Java events.
*/

static vt_Key2VK  vt_keymap[] = {
  {  0,  127,      VK_BACK_SPACE     },
  {  0,    9,      VK_TAB            },
  {  2,    1,      VK_ENTER          },
  {  2,    7,      VK_CAPS_LOCK      },
  {  2,    8,      VK_NUM_LOCK       },
  {  2,    9,      VK_SCROLL_LOCK    },
  {  2,   14,      VK_PRINTSCREEN    },
  {  7,    0,      VK_SHIFT          },
  {  7,    2,      VK_CONTROL        },
  {  7,    3,      VK_ALT            },
  {  7,    1,      VK_ALT            },
  {  6,    0,      VK_DOWN           },
  {  6,    1,      VK_LEFT           },
  {  6,    2,      VK_RIGHT          },
  {  6,    3,      VK_UP             },
  {  0,  ' ',      VK_SPACE          },
  {  0,  ',',      VK_COMMA          },
  {  0,  '.',      VK_PERIOD         },
  {  0,  '/',      VK_SLASH          },
  {  0,  '0',      VK_0              },
  {  0,  '1',      VK_1              },
  {  0,  '2',      VK_2              },
  {  0,  '3',      VK_3              },
  {  0,  '4',      VK_4              },
  {  0,  '5',      VK_5              },
  {  0,  '6',      VK_6              },
  {  0,  '7',      VK_7              },
  {  0,  '8',      VK_8              },
  {  0,  '9',      VK_9              },
  {  0,  ';',      VK_SEMICOLON      },
  {  0,  '`',      VK_BACK_QUOTE     },
  {  0, '\'',      VK_QUOTE          },
  {  0,  '[',      VK_OPEN_BRACKET   },
  {  0, '\\',      VK_BACK_SLASH     },
  {  0,  ']',      VK_CLOSE_BRACKET  },
  { 11,  'A',      VK_A              },
  { 11,  'B',      VK_B              },
  { 11,  'C',      VK_C              },
  { 11,  'D',      VK_D              },
  { 11,  'E',      VK_E              },
  { 11,  'F',      VK_F              },
  { 11,  'G',      VK_G              },
  { 11,  'H',      VK_H              },
  { 11,  'I',      VK_I              },
  { 11,  'J',      VK_J              },
  { 11,  'K',      VK_K              },
  { 11,  'L',      VK_L              },
  { 11,  'M',      VK_M              },
  { 11,  'N',      VK_N              },
  { 11,  'O',      VK_O              },
  { 11,  'P',      VK_P              },
  { 11,  'Q',      VK_Q              },
  { 11,  'R',      VK_R              },
  { 11,  'S',      VK_S              },
  { 11,  'T',      VK_T              },
  { 11,  'U',      VK_U              },
  { 11,  'V',      VK_V              },
  { 11,  'W',      VK_W              },
  { 11,  'X',      VK_X              },
  { 11,  'Y',      VK_Y              },
  { 11,  'Z',      VK_Z              },
  { 11,  'a',      VK_A              },
  { 11,  'b',      VK_B              },
  { 11,  'c',      VK_C              },
  { 11,  'd',      VK_D              },
  { 11,  'e',      VK_E              },
  { 11,  'f',      VK_F              },
  { 11,  'g',      VK_G              },
  { 11,  'h',      VK_H              },
  { 11,  'i',      VK_I              },
  { 11,  'j',      VK_J              },
  { 11,  'k',      VK_K              },
  { 11,  'l',      VK_L              },
  { 11,  'm',      VK_M              },
  { 11,  'n',      VK_N              },
  { 11,  'o',      VK_O              },
  { 11,  'p',      VK_P              },
  { 11,  'q',      VK_Q              },
  { 11,  'r',      VK_R              },
  { 11,  's',      VK_S              },
  { 11,  't',      VK_T              },
  { 11,  'u',      VK_U              },
  { 11,  'v',      VK_V              },
  { 11,  'w',      VK_W              },
  { 11,  'x',      VK_X              },
  { 11,  'y',      VK_Y              },
  { 11,  'z',      VK_Z              },
  {  3,    0,      VK_NUMPAD0        },
  {  3,    1,      VK_NUMPAD1        },
  {  3,    2,      VK_NUMPAD2        },
  {  3,    3,      VK_NUMPAD3        },
  {  3,    4,      VK_NUMPAD4        },
  {  3,    5,      VK_NUMPAD5        },
  {  3,    6,      VK_NUMPAD6        },
  {  3,    7,      VK_NUMPAD7        },
  {  3,    8,      VK_NUMPAD8        },
  {  3,    9,      VK_NUMPAD9        },
  {  3,   10,      VK_ADD            },
  {  3,   11,      VK_SUBTRACT       },
  {  3,   12,      VK_MULTIPLY       },
  {  3,   13,      VK_DIVIDE         },
  {  3,   14,      VK_ENTER          },
  {  3,   16,      VK_DECIMAL        },
  {  1,    0,      VK_F1             },
  {  1,    1,      VK_F2             },
  {  1,    2,      VK_F3             },
  {  1,    3,      VK_F4             },
  {  1,    4,      VK_F5             },
  {  1,    5,      VK_F6             },
  {  1,    6,      VK_F7             },
  {  1,    7,      VK_F8             },
  {  1,    8,      VK_F9             },
  {  1,    9,      VK_F10            },
  {  1,   10,      VK_F11            },
  {  1,   11,      VK_F12            },
  {  1,   20,      VK_HOME           },
  {  1,   21,      VK_INSERT         },
  {  1,   22,      VK_DELETE         },
  {  1,   23,      VK_END            },
  {  1,   24,      VK_PAGE_UP        },
  {  1,   25,      VK_PAGE_DOWN      },
  {  1,   29,      VK_PAUSE          },
  
//  { 0, 0,          VK_KANA           },
//  { 0, 0,          VK_FINAL          },
//  { 0, 0,          VK_KANJI          },
  { 0, 27,          VK_ESCAPE         },
//  { 0, 0,          VK_CONVERT        },
//  { 0, 0,          VK_NONCONVERT     },
//  { 0, 0,          VK_ACCEPT         },
//  { 0, 0,          VK_MODECHANGE     },
//  { 0, 0,          VK_HELP           },
//  { 0, 0,          VK_META           },
//
  { 0xFF,  0,      VK_UNDEFINED      }
};


static w_int           kfd = 0;
static w_ubyte         buf[16];
static w_int           oldkbmode;
static struct termios  oldtermios;
static w_ubyte         modifiers = 0;
static w_ubyte         togglers = 0;
static w_ubyte         keyboard_enabled = 0;

/*
** A few arrays to make it easier and faster to parse certain events.
*/

static w_ubyte conmods[] = { CK_SHIFT, CK_ALTR, CK_CTRL, CK_ALTL };
static w_ubyte contoggle[] = { LED_CAP, LED_NUM, LED_SCR };

void keyboard_shutdown(void) {
  /*
  ** Restore the old keyboard mode.
  */
  
  if (keyboard_enabled) {
    if (ioctl(kfd, KDSKBMODE, oldkbmode)) {
      perror("KDSKBMODE");
      // Well, that didn't work. But we can still restore termios.
    }

    /*
    ** Restore the old termios settings.
    */
    
    if (tcsetattr(kfd, 0, &oldtermios) == -1) perror("tcsetattr");

    /*
    ** Close the device.
    */
    
    close(kfd);
  }
}

/*
** Update keyboard LEDs and flags in the kernel.
*/
static void update_leds(w_int keybfd, w_ubyte toggleFlags)
{
  ioctl(keybfd, KDSETLED, toggleFlags);  // LEDs
  ioctl(keybfd, KDSKBLED, toggleFlags);  // keyboard flags
}

w_int keyboard_init(void) {
  struct   termios new;

  /*
  ** Get and store the current keyboard mode.
  */
  
  if(ioctl(kfd, KDGKBMODE, &oldkbmode)) {
    woempa(9, "Could not get the old keyboard mode...\n");
    return -1;
  }

  /*
  ** Get and store the current termios.
  */

  if(tcgetattr(kfd, &oldtermios) == -1 || tcgetattr(kfd, &new) == -1) {
    woempa(9, "Could not get the old termios...\n");
    return -1;
  }

  /*
  ** The new termios.
  */
  
  new.c_lflag &= ~ (ICANON | ECHO | ISIG);
  new.c_iflag = 0;
  new.c_cc[VMIN] = sizeof(buf);
  new.c_cc[VTIME] = 1;

  if(tcsetattr(kfd, TCSAFLUSH, &new) == -1) {
    woempa(9, "Could not set the new termios...\n");
    return -1;
  }

  /*
  ** Set the keyboard to MEDIUMRAW mode.
  */
  
  if(ioctl(kfd, KDSKBMODE, K_MEDIUMRAW)) { 
    woempa(9, "Could not set the new keyboard mode (MEDIUMRAW)...\n");
    return -1;
  }

  /*
  ** Put into non-blocking mode. Shouldn't be necessary since we use poll(),
  ** but without it AWT seems to block at startup until someone hits a key.
  */
  fcntl(kfd, F_SETFL, O_NONBLOCK);

  /*
  ** Get current keyboard toggle state.
  */
  if(ioctl(kfd, KDGKBLED, &togglers))
  {
    woempa(9, "Could not get initial keyboard toggle state. Continuing...\n");
    togglers = 0;
  }

  /*
  ** Make sure keyboard LEDs match the toggle state.
  */
  update_leds(kfd, togglers);

  keyboard_enabled = 1;
  return 0;
}

/*
** Check if a certain virtual key is a modifier.
*/

w_int keyboard_isMod(w_int VK) {
  return (VK == VK_SHIFT) || (VK == VK_ALT) || (VK == VK_META)
	 || (VK == VK_CONTROL) || (VK == VK_CAPS_LOCK)
	 || (VK == VK_NUM_LOCK) || (VK == VK_SCROLL_LOCK);
}

/*
** Poll for keyboard events.
*/

w_int keyboard_poll(w_int *VK, w_char *keychar, w_int *mod, w_int *pressed) {
  w_int    i = 0;
  w_int    n;
  w_int    kbd_command;
  w_int    kbd_argument;
  struct   kbentry entry;
  vt_key2vk iter;
  struct pollfd pfd;

  if(!keyboard_enabled) {
    return 0;
  }

  pfd.fd = kfd;
  pfd.events = POLLIN;
  n = poll(&pfd, 1, 0);

  if (pfd.revents & POLLERR || pfd.revents & POLLHUP || pfd.revents & POLLNVAL)
  {
    woempa(9, __FILE__ ": Poll error (revents=%x). Keyboard disabled.\n",
           pfd.revents);
    keyboard_enabled = 0;
    return 0;
  }
  if (n != 1) {
    return 0;
  }

  n = read(kfd, buf, 1);

  if(n != 1) {

    /*
    ** Read nothing..
    */
    
    return 0;
  }
  
  /*
  ** If a key is pressed, the MSB is 0, if a key is released, it's 1.
  */
      
  *pressed = !(buf[i] & 0x80);

  /*
  ** Fill in the kb_entry structure and ask the kernel for translation.
  */

  entry.kb_table = modifiers;
  entry.kb_index = buf[i] & 0x7F; 
  ioctl (kfd, KDGKBENT, &entry);

  /*
  ** Split the result into a command and an argument.
  */

  kbd_command  = entry.kb_value / 256;
  kbd_argument = entry.kb_value % 256;

  /*
  ** Parse the keyevents.
  */

  if(kbd_command == 7) {
        
    /*
    ** It's a modifier.
    */
       
    if(0 <= kbd_argument && kbd_argument <= 3) {
      if(*pressed) {
        modifiers |= conmods[kbd_argument];
      }
      else {
        modifiers &= 0xFF ^ conmods[kbd_argument];
      }
    }
    *mod = modifiers;
  }
  else if(kbd_command == 2) {
     
    if(7 <= kbd_argument && kbd_argument <= 9) {

      /*
      ** It's one of the toggle keys (capslock, numlock, scrolllock).
      */
          
      if(*pressed) {
        togglers ^= contoggle[kbd_argument - 7];

        /*
        ** Make sure that the kernel and the leds reflect the current
        ** situation of these keys.
        */
            
        update_leds(kfd, togglers);
      }
    }
  }

  /* Convert to VK. */
  *VK = VK_UNDEFINED;
  for (iter = vt_keymap; *VK == VK_UNDEFINED && iter->set != 0xff; iter++)
  {
    if (iter->set == kbd_command && iter->value == kbd_argument) {
      *VK = iter->VK;
    }
  }
  *keychar = kbd_argument;

  /* Not sure if this is the right way to do it, but it seems to work */
  if (togglers & LED_CAP && *VK >= VK_A && *VK <= VK_Z) {
    *keychar = toupper(*keychar);
  }

  return 1;
}
