#!/bin/bash

# -----------------------------------------------------------------------------

build=
let maxtime=600
let sleeptime=60
unknownoption=

# -----------------------------------------------------------------------------

function showHelp() {
  echo "usage: $0 [-x] [ --help | -h ] [-m maxtime] [-s sleeptine] [<build nbr > ...] ] [all] "
  echo "       -x must be first parameter; sets verbose mode"
  echo "       --help and -h generate this help text"
  echo "       -m maxtime : sets the maximum elapsed time the mauve tests are expected"
  echo "         to run for one build; default is $maxtime seconds "
  echo "       -s sleeptime : sets the time interval between checks testing if mauve "
  echo "         tests for a build are still running; default is $sleeptime seconds"
  echo "       subsequent parameters are a list of build numbers, or the keyword 'all' "
  echo "       keyword 'all' or no build numbers indicate all builds are to be processed"
  echo ""
  echo " Execute from within the main directory of a particular release version. "
  echo " Executes mauve tests for the specified build(s); compares the resulting "
  echo " log file (build<nbr>/fsroot/results) with the list of known FAILS; if no"
  echo " are found, the results file is ok, and the mauve tests have passed."
  echo " A success or failure message is written a log file build<nbr>/BUILD<nbr>-MAUVE.log"
}

# -----------------------------------------------------------------------------

function getArgs() {

  if [ $1 ] && [ $1 = "-x" ]; then
    shift
    set -x
  fi

  while [ $# -gt 0 ]; do
    case $1 in
      --help | -h )
         showHelp
         set -
         exit
         ;;
      -m )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let maxtime=0
           echo "missing value for -m (maxtime) option"
         else
           let maxtime=$2
           shift
         fi
         ;;
      -s )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let sleeptime=0
           echo "missing value for -s (sleeptime) option"
         else
           let sleeptime=$2
           shift
         fi
         ;;
      1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 )
         if [ -z "$build" ]; then
           build=$1
         else
           build=$build" "$1
         fi
         ;;
      all )
         build="1 2 3 4 5 6 7 8 9 10"
         ;;
      * )
         echo "$1 : unknown option"
         unknownoption=error
         ;;
    esac
    shift
  done

  if [ $maxtime -eq 0 ] || [ $sleeptime -eq 0 ] || [ $unknownoption ]; then
    echo "$0 aborted: parameter errors; try option --help"
    set -
    exit
  fi

  if [ -z "$build" ]; then
    build="1 2 3 4 5 6 7 8 9 10"
  fi
}

# MAIN ------------------------------------------------------------------------
#if [ $b -eq 5 ] ||  [ $b -eq 6 ] ||[ $b -eq 9 ] ||[ $b -eq 10 ]; then
#running=$(ps h --format time -p ${mauvepid} )
#for k in $running; do
#  l=`echo $k | cut -c1,2,4,5,7,8`
#  echo $l
#done


getArgs $*

for b in $build ; do

  echo "BEGIN mauve tests for BUILD$b"
  BUILDDIR=build$b
  LOGFILE=BUILD${b}-MAUVE.log
  RESULTS=fsroot/results

  if [ -f ${BUILDDIR}/wonka ]; then
    cd  ${BUILDDIR}

    # problem: pidof -s returns the pid of the wonka executable that was last started;
    #          it ignores the path; if a wonka was running already, and running the one
    #          in $(BUILDDIR) did not succeed, the pid of the running wonka is returned!

    oldwonkas=$(pidof ./wonka)
    ./wonka gnu.testlet.TestRunner  &> /dev/null   &
    sleep 5
    allwonkas=$(pidof ./wonka)
    newwonkas=allwonkas
    for w in $oldwonkas; do
      newwonkas=$(echo $newwonkas | sed 's/'$w' //')
    done

    if [ -z $mauvepid ]; then
      echo "MAUVE TESTS  : can't execute"
      echo "BUILD$b: MAUVE TESTS  : can't execute  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
    else

      running=$(ps h --format time -p ${mauvepid} | cut -c1,2,4,5,7,8)
      let s=0
      while [ $running ] && [ $s -lt $maxtime ] ; do
        sleep $sleeptime
        let s=$s+$sleeptime
        running=$(ps h --format time -p ${mauvepid} | cut -c1,2,4,5,7,8)
      done

      if [ $s -gt $maxtime ]; then
        echo "MAUVE TESTS  elapsed run time exceeds ${maxtime}s: aborted"
        echo "BUILD$b: MAUVE TESTS  elapsed run time exceeds ${maxtime}s: aborted $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
        kill -9 $mauvepid
      else

        if [ ! -s $RESULTS ]; then
          echo "MAUVE TESTS  no results found : $BUILDDIR/$RESULTS"
          echo "BUILD$b: MAUVE TESTS  no results found : $BUILDDIR/$RESULTS  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
        else
          alias grep=grep
          grep -a -e 'FAIL' $RESULTS  > mauve.fail
          diff mauve.fail ../refmauve.fail > mauve.diff
          if [ -s mauve.diff ]; then
            echo MAUVE TESTS  FAILED
            echo "BUILD$b: BUILD$b: MAUVE TESTS FAILED  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
            echo "" >> $LOGFILE
            echo "-- un-expected fails -- " >> $LOGFILE
            cat mauve.diff | grep FAIL  >> $LOGFILE
          else
            echo MAUVE TESTS  PASSED
            echo "BUILD$b: MAUVE TESTS PASSED  $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
          fi
          rm mauve.fail
          rm mauve.diff
        fi

      fi

    fi

    cd ..
  else
    echo "file ${BUILDDIR}/wonka not found"
    echo "BUILD$b: file ${BUILDDIR}/wonka not found   $(date +%Y/%m/%d%t%H:%M:%S)" > $LOGFILE
  fi

  echo "END mauve tests for BUILD$b"
  done


# END MAIN ---------------------------------------------------------------------

set -
exit
