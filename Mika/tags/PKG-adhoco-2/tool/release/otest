#!/bin/bash

# -----------------------------------------------------------------------------

build=
VERBOSE=
let maxtime=300
let sleeptime=30
unknownoption=


# -----------------------------------------------------------------------------

function showHelp() {
cat <<EOF
  usage: $0 [-x] [ --help | -h ] [-m maxtime] [-s sleeptime] {{<build nbr > ...} | all}
         -x must be first parameter; sets script debug mode
         --help and -h generate this help text
         -m maxtime : sets the maximum elapsed time the oswald tests are expected
           to run for one build; default is $maxtime seconds
         -s sleeptime : sets the time interval between checks testing if oswaldtests
           for a build are still running; default is $sleeptime seconds
         -v : executes oswaldtests in verbose mode
         subsequent mandatory parameters are a list of build numbers, or the keyword
         'all'; this keyword means all builds are to be processed

  Execute from within the main directory of a particular release version.
  Executes oswaldtests for the specified build(s); checks that the tests
  don't deadlock, kills the tests after $maxtime seconds
  A success or failure message is written a log file build<nbr>/BUILD<nbr>-OSWALD.log
EOF
}

# -----------------------------------------------------------------------------

function getArgs() {

  if [ $1 ] && [ $1 = "-x" ]; then
    shift
    set -x
  fi

  while [ $# -gt 0 ]; do
    case $1 in
      --help | -h )
         showHelp
         set -
         exit
         ;;
      -v )
         VERBOSE=true
         ;;
      -m )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let maxtime=0
           echo "missing value for -m (maxtime) option" 1>&2
         else
           let maxtime=$2
           shift
         fi
         ;;
      -s )
         if [ ! $2 ] || [ ${2#-} != $2 ] ; then    # check that $2 exists and does not contain a "-"
           let sleeptime=0
           echo "missing value for -s (sleeptime) option" 1>&2
         else
           let sleeptime=$2
           shift
         fi
         ;;
      1 | 2 | 3 | 4 | 7 | 8 | 11 | 12 | 21 | 22 | 23 | 24 | 27 | 28 | 31 | 32)
         if [ -z "$build" ]; then
           build=$1
         else
           build=$build" "$1
         fi
         ;;
      all )
         build="1 2 3 4 7 8 11 12 21 22 23 24 27 28 31 32"
         ;;
      * )
         echo "$1 : unknown option" 1>&2
         unknownoption=error
         ;;
    esac
    shift
  done

  if [ $maxtime -eq 0 ] || [ $sleeptime -eq 0 ] || [ $unknownoption ]; then
    echo "$0 aborted: parameter errors; try option --help" 1>&2
    set -
    exit
  fi

  if [ -z "$build" ]; then
    j_abort 1 "error: missing mandatory build number(s)."
  fi

}

# MAIN ------------------------------------------------------------------------

if [ -z $RTTOOL ]; then
  echo "Environment variable RTTOOL not defined. Cannot proceed." 1>&2
  exit
else
  source $RTTOOL/j_include
  if [ $? -ne 0 ]; then
    echo "Aborting ..." 1>&2
    exit
  fi
fi


getArgs $*

for b in $build ; do

  echo "BEGIN oswaldtests for BUILD$b"
  BUILDDIR=build$b
  LOGFILE=BUILD${b}-OSWALD.log

  if [ -f ${BUILDDIR}/oswaldtests ]; then
    cd  ${BUILDDIR}

    if [ -z $VERBOSE ]; then
      ./oswaldtests  &>/dev/null  &
    else
      ./oswaldtests   &
    fi
    oswaldpid=$!
    if [ -z $oswaldpid ]; then
      echo "BUILD$b: OSWALD TESTS FAIL  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
      echo "" | tee -a $LOGFILE
      echo "  ${BUILDDIR}/oswaldtests : can't execute" | tee -a $LOGFILE
    else

      let cputime1=-1
      cputime2=$(ps h -o time -p ${oswaldpid} | cut -c1,2,4,5,7,8)
      if [ -z $cputime2 ] ; then
        cputime2=000000
      fi
      let s=0
      let runtime=-1
      # wait until max elapsed time not consumed or until test crashed
      while [ $cputime1 -le $cputime2 ] && [ $s -lt $maxtime ] ; do
        if [ $cputime1 -eq $cputime2 ]; then
          let runtime=$s
        else
          let runtime=-1
        fi
        sleep $sleeptime
        let s=$[s+sleeptime]
        cputime1=$cputime2
        cputime2=$(ps h -o time -p ${oswaldpid} | cut -c1,2,4,5,7,8)
        if [ -z $cputime2 ]; then
          cputime2=-1
        fi
      done
      if [ $runtime -eq -1 ]; then
        let runtime=$s
      fi

      if [ $cputime2 -eq -1 ]; then
        echo "BUILD$b: OSWALD TESTS FAIL  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
        echo "" | tee -a $LOGFILE
        echo "  premature end" | tee -a $LOGFILE
      else
        kill -9 $oswaldpid
        if [ $cputime1 -eq $cputime2 ]; then
          echo "BUILD$b: OSWALD TESTS FAIL  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
          echo "" | tee -a $LOGFILE
          echo "  program blocked" | tee -a $LOGFILE
        else
          echo "BUILD$b: OSWALD TESTS PASS  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
          echo "" | tee -a $LOGFILE
        fi
      fi

      echo "  ran for $[$runtime/60] minutes" | tee -a $LOGFILE

      cputime1=          # avoid problems with these variables in a next loop:
      cputime2=          # let cputime1=-1 fails

    fi

    cd ..
  else
    if [ -d $BUILDDIR ]; then
      cd $BUILDDIR
      echo "BUILD$b: OSWALD TESTS NOT PERFORMED  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
      echo "" | tee -a $LOGFILE
      echo "  file ${BUILDDIR}/oswaldtests not found" | tee -a $LOGFILE
      cd ..
    else
      echo "BUILD$b: OSWALD TESTS NOT PERFORMED  $(date +%Y/%m/%d%t%H:%M:%S)" | tee $LOGFILE
      echo "" | tee -a $LOGFILE
      echo "  directory ${BUILDDIR} not found" | tee -a $LOGFILE
    fi
  fi

  echo "END oswaldtests for BUILD$b"
done

# END MAIN ---------------------------------------------------------------------

set -
exit


