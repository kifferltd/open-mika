+-------------------------------------------------------------------------+
| Copyright (c) 2001 by Punch Telematix. All rights reserved.             |
|                                                                         |
| Redistribution and use in source and binary forms, with or without      |
| modification, are permitted provided that the following conditions      |
| are met:                                                                |
| 1. Redistributions of source code must retain the above copyright       |
|    notice, this list of conditions and the following disclaimer.        |
| 2. Redistributions in binary form must reproduce the above copyright    |
|    notice, this list of conditions and the following disclaimer in the  |
|    documentation and/or other materials provided with the distribution. |
| 3. Neither the name of Punch Telematix nor the names of other           |
|    contributors may be used to endorse or promote products derived      |
|    from this software without specific prior written permission.        |
|                                                                         |
| THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED          |
| WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF    |
| MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    |
| IN NO EVENT SHALL PUNCH TELEMATIX OR OTHER CONTRIBUTORS BE LIABLE       |
| FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR            |
| CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    |
| SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR         |
| BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   |
| WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE    |
| OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  |
| IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                           |
+-------------------------------------------------------------------------+

* Configuration/wonka/default
-----------------------------
Set some options to get wonka running properly. 

SCHEDULER default = o4e ;		// our own scheduler
AWT default = none ;     		// no AWT (yet)
FICL default = false ;			// block out debugger thread, 
					// will disappear in time anyway
FILESYSTEM default = vfs ;		// We work with the in-house fs
NETWORK default = none ;		// no network support (yet)
MODULES default = false ;		// normally this is already ok
SHARED_OBJECTS default = false ;	// ecos hasn't got dynamic loading, so 
STATIC default = true ;			// we make it all static

in short , just do:
cp Configuration/wonka/ecos Configuration/wonka/default

* Configuration/host/ecos
-------------------------
Match the directories to your own eCos-library directories

CCFLAGS += -g -I/data/builds/all_install/include ;
LINKFLAGS += -L/data/builds/all_install/lib -Ttarget.ld -nostdlib ;


* gettimeofday
--------------
Doesn't come with the standard eCos package, but it's implemented in 
the SNMP package. Wich is in the cvs-repository of eCos.


* VisualTest en Mauve Test
--------------------------
These are the test-suites for the AWT, these won't do anything good 
for you because AWT isn't implemented yet. It will only make the 
executable bigger.
You may comment these out...


* wonka/src/native/java/Jamfile
-------------------------------
There isn't any networking support yet, so just leave the java.net package out
#SubInclude WONKA_TOP wonka src native java net ;


* wonka/java/com/acunia/wonka/test/Jamfile
------------------------------------------
The Calculator test uses some AWT stuff, so just leave the following out of the
jarfile: Calculator.java CalculatorApplication.java


* wonka/src/misc/modules.c
--------------------------
Modules aren't gone by just setting MODULES = false in the configuration file. 
These functions must be adjusted, so they won't do any dynamic loading no more.
The return values are 'normal' values for these functions, so everything should work.


void *loadModule(w_ubyte *name) {
  char *filename;
  //void *handle ;		// remove this
  void *handle = NULL ;		// add this

  woempa(9, "%s\n", name);
  
  filename = allocMem_system(strlen(name) + 10);
  sprintf(filename, "lib%s.so", name);
  //handle = dlopen (filename, RTLD_LAZY | RTLD_GLOBAL);	// remove this
  releaseMem(filename);
  
  if (!handle) return NULL; else return handle;
}

void *lookupModuleSymbol(w_ubyte *name) {
  woempa(9, "%s\n", name);
  //return dlsym(RTLD_DEFAULT, name);		// remove this
  return NULL ;					// add this		
}

This problem has been taken care of in the 0.8.1 release


* wonka/src/vm/coreclasses.in
-----------------------------

There no  network support yet (go go Tim) so comment everything network-alike out of coreclasses.in
like this :

#java/net/InetAddress
#       address                 I
#       family                  I
#       hostName                Ljava/lang/String;
#       addressCache            Ljava/lang/String;
#       createInetAddress       (Ljava/lang/String;)V           InetAddress_createInetAddress
#       getLocalName            ()Ljava/lang/String;            InetAddress_getLocalName
#        lookupName             ()Z                             InetAddress_lookupName
#java/net/DatagramSocketImpl
#        localPort              I
#        fd                     Ljava/io/FileDescriptor;
#java/net/DatagramPacket
#        bytes     [B
#        length    I
#        offset    I
#        port      I
#        address   Ljava/net/InetAddress;
#java/net/PlainDatagramSocketImpl
#        wotsit        +
#       timeout       I
#        nativeCreate  ()V                          PlainDatagramSocketImpl_nativeCreate
#       finalize        ()V                             PlainDatagramSocketImpl_finalize
#        bind          (ILjava/net/InetAddress;)V    PlainDatagramSocketImpl_bind
#        send          (Ljava/net/DatagramPacket;)V  PlainDatagramSocketImpl_send
#        _receive      (Ljava/net/DatagramPacket;)I  PlainDatagramSocketImpl_receive
#        peek          (Ljava/net/InetAddress;)I     PlainDatagramSocketImpl_peek
#        close         ()V                           PlainDatagramSocketImpl_close
#        join         (Ljava/net/InetAddress;)V     PlainDatagramSocketImpl_join
#        leave        (Ljava/net/InetAddress;)V     PlainDatagramSocketImpl_leave
#        getTimeToLive ()I                          PlainDatagramSocketImpl_getTimeToLive
#        setTimeToLive (I)V                         PlainDatagramSocketImpl_setTimeToLive
#       getSocket     ()I                           PlainDatagramSocketImpl_getSocket           
#        getBindAddress         (I)I                        PlainDatagramSocketImpl_optBindAddress
#        optMulticastIF         (ILjava/net/InetAddress;Z)I PlainDatagramSocketImpl_optMulticastIF
#        optNoDelay    (IZZ)Z                       PlainDatagramSocketImpl_optNoDelay
#        optLinger     (II)I                        PlainDatagramSocketImpl_optLinger
#        optIntOptions  (III)I                      PlainDatagramSocketImpl_optIntOptions
#java/net/SocketImpl
#        address                Ljava/net/InetAddress;
#        port                   I
#        localport              I
#java/net/PlainSocketImpl
#       wotsit                  +
#        closed                 Z
#       timeout                 I
#        read                   ([BII)I PlainSocketImpl_read
#        write                  ([BII)V PlainSocketImpl_write
#        nativeCreate           ()V     PlainSocketImpl_nativeCreate   
#       finalize                ()V     PlainSocketImpl_finalize
#        listen                 (I)V    PlainSocketImpl_listen
#        nativeAccept           (Ljava/net/SocketImpl;)I        PlainSocketImpl_accept
#        available              ()I     PlainSocketImpl_available
#        bind                   (Ljava/net/InetAddress;I)V      PlainSocketImpl_bind
#        close                  ()V     PlainSocketImpl_close
#        connect                (Ljava/net/InetAddress;I)V      PlainSocketImpl_connect
#       getSocket               ()I                             PlainSocketImpl_getSocket
#java/net/ConnectException                                         
#java/net/BindException                                         
#java/net/SocketException                                         
#java/net/UnknownHostException


* fs/vfs/src/vfs_functions.c
----------------------------

vfs_rename isn't completely finished yet, so we'll empty the function. Just moving the #ifdef CRAP into
the function scope will do the trick (watch for the #endif, move it too!!). A function-call will fail, but
just don't program with this function ;-)

this has been moved in the cvs head, so don't bother any more

* wonka/hal/hostos/ecos/src/exec.c
----------------------------------

All functions don't do anything. This has something to do with networking... If you want to see what
was in it, just take a look at wonka/hal/hostos/linux/src/exec.c. It's just a copy.

* wonka/src/native/java/io/File.c
---------------------------------
vfs_rename isn't implemented well in vfs, so ignore the warning
you'll see and don't use vfs_rename (yet)


* wonka/Jamfile
---------------
jam -sHOSTOS=ecos install

this will fail because the filesystem can't be linked in, don't worry just follow these steps...

The filesystem-story: We statically link the filesystem into the binary. 
Create an image of 1Mb with:

dd if=/dev/zero of=image bs=1k count=1024

then make a filesystem inside the file:

/sbin/mke2fs -F image

Then copy the files and directories that are in the open-wonka/build-???-????/wonka/fsroot dir into the file:
(in fact this is just the system directory)

mount image ./a_directory -o loop
<copy the files> 
umount

then convert the file to elf32 format for syntetic target or elf32-littlearm for ipaq,... and put
it in an archive to link into wonka

objcopy -I binary -O elf32-i386 -B i386 image image.o
ar q image.a image.o  (make sure you first delete any image.a files in this dir)
cp image.a open-wonka/fs/vfs/src/

your all done now... just do jam -sHOSTOS=ecos wonka once more,
your binary is build-???-ecos/wonka/bin/wonka


* image_file/system/system.properties
-------------------------------------
Here you can say wich class will be executed by wonka, the VisualTest isn't working
because we didn't finish it yet. A good test for the VM is Carillon so just put 

com.acunia.wonka.Init.linux.start=com.acunia.wonka.test.Carillon 

here...
