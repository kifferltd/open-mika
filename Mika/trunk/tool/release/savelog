#!/bin/bash

# -----------------------------------------------------------------------------

function showHelp() {
  echo "usage: $0 [-x] [ --help | -h ] { -w | -o | -mt | -ot | -vt} -d <log dir> [<build nbr > ...] ] [all] "
  echo "       -x must be first parameter; sets verbose mode"
  echo "       --help, -h and ? generate this help text"
  echo "       at least one of the switches -w -o -mt -ot -vt must be specified:"
  echo "       -w : switch; copies wonka build logs"
  echo "       -o : switch; copies oswaldtests build logs"
  echo "       -mt : switch; copies mauvetest logs"
  echo "       -ot : switch; copies oswaldtest logs"
  echo "       -vt : switch; copies vtetest logs"
  echo "       -d is mandatory; requires a value identifying a subdirectory of "
  echo "         directory 'test-log'"
  echo "       subsequent parameters are a list of build numbers, or the keyword 'all' "
  echo "       keyword 'all' or no build numbers indicate all builds are to be processed"
  echo ""
  echo " save the build log files of the specified build numbers from the respective "
  echo " build directories to the specified subdir of directory test-log"
  echo " execute from within the main directory of a particular release version "
}

# -----------------------------------------------------------------------------

function getArgs() {

if [ $1 ] && [ $1 = "-x" ]; then
  shift
  set -x
fi

while [ $# -gt 0 ]; do
  case $1 in
    --help | -h )
       showHelp
       exit
       ;;
    -w )
       wonkabuild=true
       ;;
    -o )
       oswaldtestsbuild=true
       ;;
    -mt )
       mauvetests=true
       ;;
    -ot )
       oswaldtests=true
       ;;
    -vt )
       vtetests=true
       ;;
    -d )
       if [ ! $2 ] || [ ${2#-} != $2 ];  then
         savedir=error
         echo "missing value for -d (target dir) option"
       else
         if [ ! -d test-log/$2 ]; then
           savedir=error
           echo "directory test-log/$2 not found"
         else
           savedir=test-log/$2
         fi
         shift
       fi
       ;;
    1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12)
       if [ -z $build ]; then
         build=$1
       else
         build=$build" "$1
       fi
       ;;
    all )
       build="1 2 3 4 5 6 7 8 9 10 11 12"
       ;;
    * )
       echo "$1 : unknown option"
       unknownoption=error
       ;;


  esac
  shift
done

if [ -z $savedir ]; then
  echo "no target dir specified"
  savedir=error
fi

if [ $savedir = "error" ] || [ $unknownoption ]; then
  echo "$0 aborted: parameter errors; try option --help"
  set -
  exit
fi

if [ -z $wonkabuild ] && [ -z $oswaldtestsbuild ] && [ -z $mauvetests ] &&
   [ -z $oswaldtests ] && [ -z $vtetests ]; then
  echo "$0 aborted: nothing specified to save; try option --help"
  set -
  exit
fi

if [ -z $build ]; then
  build="1 2 3 4 5 6 7 8 9 10 11 12"
fi

}

# MAIN ------------------------------------------------------------------------

getArgs $*

for b in $build ; do

  BUILDDIR=build$b
  if [ -d $BUILDDIR ]; then

    # copy wonka build logs
    if [ $wonkabuild ]; then
      if [ -f ${BUILDDIR}/BUILD$b.log ]; then
        if [ -f $savedir/BUILD$b.log ]; then
          mv $savedir/BUILD$b.log $savedir/BUILD$b.log.old
        fi
        echo " copying ${BUILDDIR}/BUILD$b.log ..."
        cp ${BUILDDIR}/BUILD$b.log $savedir
      fi
      if [ -f ${BUILDDIR}/BUILD${b}W.log ]; then
        if [ -f $savedir/BUILD${b}W.log ]; then
          mv $savedir/BUILD${b}W.log $savedir/BUILD${b}W.log.old
        fi
        echo " copying ${BUILDDIR}/BUILD${b}W.log ..."
        cp ${BUILDDIR}/BUILD${b}W.log $savedir
      fi
    fi

    # copy oswaldtests build logs
    if [ $oswaldtestsbuild ]; then
      if [ -f ${BUILDDIR}/BUILD${b}OT.log ]; then
        if [ -f $savedir/BUILD${b}OT.log ]; then
          mv $savedir/BUILD${b}OT.log $savedir/BUILD${b}OT.log.old
        fi
        echo " copying ${BUILDDIR}/BUILD${b}OT.log ..."
        cp ${BUILDDIR}/BUILD${b}OT.log $savedir
      fi
      if [ -f ${BUILDDIR}/BUILD${b}OTW.log ]; then
        if [ -f $savedir/BUILD${b}OTW.log ]; then
          mv $savedir/BUILD${b}OTW.log $savedir/BUILD${b}OTW.log.old
        fi
        echo " copying ${BUILDDIR}/BUILD${b}OTW.log ..."
        cp ${BUILDDIR}/BUILD${b}OTW.log $savedir
      fi
    fi

    # copy mauvetests logs
    if [ $mauvetests ]; then
      if [ -f ${BUILDDIR}/BUILD${b}-MAUVE.log ]; then
        if [ -f $savedir/BUILD${b}-MAUVE.log ]; then
          mv $savedir/BUILD${b}-MAUVE.log $savedir/BUILD${b}-MAUVE.log.old
        fi
        echo " copying ${BUILDDIR}/BUILD${b}-MAUVE.log ..."
        cp ${BUILDDIR}/BUILD${b}-MAUVE.log $savedir
      fi
      if [ -f ${BUILDDIR}/fsroot/results ]; then
        if [ -f $savedir/BUILD${b}-results ]; then
#          mv $savedir/BUILD${b}-results $savedir/BUILD${b}-results.old
          rm $savedir/results*
        fi
        echo " copying ${BUILDDIR}/fsroot/results ..."
        cp ${BUILDDIR}/fsroot/results* $savedir/
      fi
    fi

    # copy oswaldtests logs
    if [ $oswaldtests ]; then
      if [ -f ${BUILDDIR}/BUILD${b}-OSWALD.log ]; then
        if [ -f $savedir/BUILD${b}-OSWALD.log ]; then
          mv $savedir/BUILD${b}-OSWALD.log $savedir/BUILD${b}-OSWALD.log.old
        fi
        echo " copying ${BUILDDIR}/BUILD${b}-OSWALD.log ..."
        cp ${BUILDDIR}/BUILD${b}-OSWALD.log $savedir
      fi
    fi

    # copy vte tests logs
    if [ $vtetests ]; then
      if [ -f ${BUILDDIR}/BUILD${b}-VTE.log ]; then
        if [ -f $savedir/BUILD${b}-VTE.log ]; then
          mv $savedir/BUILD${b}-VTE.log $savedir/BUILD${b}-VTE.log.old
        fi
        echo " copying ${BUILDDIR}/BUILD${b}-VTE.log ..."
        cp ${BUILDDIR}/BUILD${b}-VTE.log $savedir
      fi
      if [ -f ${BUILDDIR}/fsroot/vte.log ]; then
        if [ -f $savedir/BUILD${b}-vte.log ]; then
          mv $savedir/BUILD${b}-vte.log $savedir/BUILD${b}-vte.log.old
        fi
        echo " copying ${BUILDDIR}/fsroot/vte.log ..."
        cp ${BUILDDIR}/fsroot/vte.log $savedir/BUILD${b}-vte.log
      fi
    fi
  else
    echo "Builddir $BUILDDIR not found"
  fi

done

if [ $wonkabuild ]; then
  if [ -f BUILD.log ]; then
    if [ -f $savedir/BUILD.log ]; then
      mv $savedir/BUILD.log $savedir/BUILD.log.old
    fi
    echo " copying BUILD.log ..."
    cp BUILD.log $savedir
  fi
fi

if [ $oswaldtestsbuild ]; then
  if [ -f BUILDOT.log ]; then
    if [ -f $savedir/BUILDOT.log ]; then
      mv $savedir/BUILDOT.log $savedir/BUILDOT.log.old
    fi
    echo " copying BUILDOT.log ..."
    cp BUILDOT.log $savedir
  fi
fi

if [ $mauvetests ]; then
    if [ -f $savedir/MAUVETESTS.log ]; then
      mv $savedir/MAUVETESTS.log $savedir/MAUVETESTS.log.old
    fi
    echo " creating MAUVETESTS.log ..."
    cat $savedir/*MAUVE.log > $savedir/MAUVETESTS.log
fi

if [ $oswaldtests ]; then
    if [ -f $savedir/OSWALDTESTS.log ]; then
      mv $savedir/OSWALDTESTS.log $savedir/OSWALDTESTS.log.old
    fi
    echo " creating OSWALDTESTS.log ..."
    cat $savedir/*OSWALD.log > $savedir/OSWALDTESTS.log
fi

if [ $vtetests ]; then
    if [ -f $savedir/VTETESTS.log ]; then
      mv $savedir/VTETESTS.log $savedir/VTETESTS.log.old
    fi
    echo " creating VTETESTS.log ..."
    cat $savedir/*VTE.log > $savedir/VTETESTS.log
fi


# END MAIN ---------------------------------------------------------------------

set -
exit