#!/bin/bash

# -------------------------------------------------------------------
# function definitions made available to scripts by including the statement
#       source $RTTOOL/j_include
# if this file was sourced already, it won't be done again
# -------------------------------------------------------------------
if [ ! -z $J_INCLUDE ]; then
  return 0
fi
J_INCLUDE=defined

J_ERROR=0
J_ERRORMSG=
J_DEBUG=   # set by function j_scriptdebug

# -------------------------------------------------------------------
# this function will unconditionally abort when called with no parameters
# if called with parameters, their number should be 2: the first parameter
# must indicate errorlevel (e.g. $?); the second must be a message string;
# if it turns out that the errorlevel is different from zero, the function
# will abort and display the error message. If the function decides to
# abort, it changes dir to 'STARTDIR' first, if it is defined (globally).
# -------------------------------------------------------------------
function j_abort(){
  if [ $# -gt 0 ]; then
    if [ $1 -ne 0 ]; then
      if [ ! -z "$2" ] ; then
        echo "$2 Aborting ..." 1>&2
      else
        echo "Aborting ..." 1>&2
      fi
      if [ ! -z "$STARTDIR" ]; then
        cd $STARTDIR
      fi
      exit $1
    fi
  else
    echo "Aborting ..." 1>&2
    if [ ! -z "$STARTDIR" ]; then
      cd $STARTDIR
    fi
    exit 1
  fi
}

# -------------------------------------------------------------------
# this function will unconditionally return when called with no parameters
# if called with parameters, their number should be 2: the first parameter
# must indicate errorlevel (e.g. $?); the second must be a message string;
# if it turns out that the errorlevel is different from zero, the function
# will return with return value equal to the error level, with global variable
# J_ERROR set to $1 and global J_ERRORMSG set to $2.
# -------------------------------------------------------------------
function j_seterror(){
  if [ $# -gt 0 ]; then
    if [ $1 -ne 0 ]; then
      J_ERROR=$1
      if [ ! -z "$2" ] ; then
        J_ERRORMSG="$2 "
      fi
      return $1
    fi
  fi
  return 0
}

# -------------------------------------------------------------------
# function waits for a "y" answer to continu or aborts if a "n"
# answer is typed
# -------------------------------------------------------------------
function j_step(){
  REPLY=
  while [ ! "$REPLY" = "y" ] && [ ! "$REPLY" = "n" ]; do
    echo "Continue? (y/n)"
    read
  done
  if [ $REPLY = n ]; then
    j_abort
  fi
}


# -------------------------------------------------------------------
# function waits for a "y" or "n" answer to continu or aborts if a "a"
# answer is typed; the user must decide how to handle the value of REPLY
# further.
# -------------------------------------------------------------------
function j_continue(){
  if [ ! -z "$1" ]; then
    PROMPT="$1 (y/n/a) : "
  else
    PROMPT="Continue? (y/n/a) : "
  fi
  REPLY=
  while [ ! "$REPLY" = "y" ] && [ ! "$REPLY" = "n" ] && [ ! "$REPLY" = "a" ]; do
    echo -n $PROMPT
    read
  done
  if [ $REPLY = a ]; then
    j_abort
  fi
}

# -------------------------------------------------------------------
# function checks accessibility of specified executables
# -------------------------------------------------------------------
function j_checkUtils() {
  for b in $@; do
    j_which $b &> /dev/null
    j_seterror $? "$b : command not found."
    if [ $? -ne 0 ]; then
      return $J_ERROR
    fi
  done
  return 0
}


# -----------------------------------------------------------------------------
# finds path of given file in given tree or aborts if file not found
# -------------------------------------------------------------------
function j_filePath() {

  #assumes a global variable J_FILEPATH exists in which the filepath
  #is returned
  #$1 is root of search path
  #$2 is file to search for

  J_FILEPATH=$(find $1 -name $2)
  test ! -z J_FILEPATH
  j_seterror $? "file '$2' not found."
  if [ $? -ne 0 ]; then
    return $J_ERROR
  fi
  J_FILEPATH=${J_FILEPATH%$2}

  return 0
}

# -----------------------------------------------------------------------------
# looks for a programme in $PATH
# -------------------------------------------------------------------
function j_which(){
# set -x
  if [ -z $1 ]; then
    j_seterror 255 "Usage : j_which programname"
    return 255
  fi
  _basename=$(basename $1)
  _dirname=${1%$_basename}
  if [ $_dirname ]; then
    if [ -e $1 ]; then
      echo $1
      return 0
    else
      j_seterror 1 "j_which: no $_basename in ($_dirname)"
      return 1
    fi
  else
    pathlist=$(echo $PATH | sed 's/:/ /g')
    for p in $pathlist; do
      if [ -e $p/$_basename ]; then
        echo $p/$_basename
        return 0
      fi
    done
    j_seterror 1 "j_which: no $_basename in ($PATH)"
    return 1
  fi
}

# -----------------------------------------------------------------------------
# function changes properties in file vte.properties
# function assumes their exists at most 1 vte.properties in path $1
# -------------------------------------------------------------------
function j_changeVteProperties() {
  # $1 = root of search path
  # $2 = vte sleeptime    (in seconds)
  # $3 = autorun property (true|false)
  # $4 = autorun period property (in minutes)

  J_FILEPATH=
  j_filePath $1 vte.properties
  if [ $? -ne 0 ]; then
    return $J_ERROR
  fi
  cp ${J_FILEPATH}vte.properties ${J_FILEPATH}vte.copy
  sed -e /sleepTime/s/1000/$2/g -e /autorun/s/false/$3/g -e /autorunTime/s/240/$4/g ${J_FILEPATH}vte.copy > ${J_FILEPATH}vte.properties
  j_seterror $? "update of vte sleeptime failed"
  if [ $? -ne 0 ]; then
    return $J_ERROR
  fi
  return 0

}

# -------------------------------------------------------------------
# function removes IAA tests from Visual Test Engine build
# -------------------------------------------------------------------
function j_changeVTEBuild() {

  # $1 = root of search path for files vte.properties and Jamfile

  JAMFILE=Jamfile
  VTEPROPERTIES=vte.properties

  J_FILEPATH=
  j_filePath $1 $JAMFILE
  if [ $? -ne 0 ]; then
    return $J_ERROR
  fi
  j_filePath $1 $VTEPROPERTIES
  if [ $? -ne 0 ]; then
    return $J_ERROR
  fi
  cp ${J_FILEPATH}${JAMFILE} ${J_FILEPATH}${JAMFILE}.copy
  grep -v -e "IAA" ${J_FILEPATH}${JAMFILE}.copy > ${J_FILEPATH}${JAMFILE}
  j_seterror $? "update of file $JAMFILE not succeeded."
  if [ $? -ne 0 ]; then
    return $J_ERROR
  fi
  cp ${J_FILEPATH}${VTEPROPERTIES} ${J_FILEPATH}${VTEPROPERTIES}.copy
  grep -v -e "IAA" ${J_FILEPATH}${VTEPROPERTIES}.copy > ${J_FILEPATH}${VTEPROPERTIES}
  j_seterror $? "update of file $VTEPROPERTIES not succeeded."
  if [ $? -ne 0 ]; then
    return $J_ERROR
  fi
  return 0

}

# -----------------------------------------------------------------------------
# set debug mode on or off; store current state in J_DEBUG
# -------------------------------------------------------------------
function j_scriptDebug() {
  if [ -z $1 ]; then
    set -
    J_DEBUG=
  else
    if [ "$1" = "-x" ]; then
      set -x
      J_DEBUG=-x
    else
      return 1
    fi
  fi
  return 0
}

# -----------------------------------------------------------------------------
# process config file; set config variables
# -------------------------------------------------------------------

function j_configure() {
  if [ $1 ]; then
    if [ ! -e "$1" ]; then
      return 1
    else
      source $1
    fi
  else
    if [ -e "./reltest.cfg" ]; then
      source ./reltest.cfg
    fi
  fi
  return 0
}
